
01TRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e90  08005e90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e98  08005e98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014428  20000078  08005f18  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a0  08005f18  000244a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164a8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc3  00000000  00000000  00036550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00039218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024042  00000000  00000000  0003b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001353e  00000000  00000000  0005f362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf8f  00000000  00000000  000728a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  0014e884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005cec 	.word	0x08005cec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005cec 	.word	0x08005cec

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200143e8 	.word	0x200143e8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fa71 	bl	8000b34 <HAL_Init>

  BaseType_t  status;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f851 	bl	80006f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //Enable the CYCCNT counter.
  DWT_CTRL |= (1 << 0);
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <main+0x94>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <main+0x94>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */
  //To record the event using the SEGGER debugger tool
  //Always start before calling any FreeRTOS APIs
  SEGGER_SYSVIEW_Conf();
 8000662:	f002 ffaf 	bl	80035c4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000666:	f004 f947 	bl	80048f8 <SEGGER_SYSVIEW_Start>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f8b3 	bl	80007d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  //Task 1
  status = xTaskCreate(task1_handler, "Task1", 200, "Hello world This is TASK-1!!!!!", 2, &task1_handle);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <main+0x98>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x9c>)
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0xa0>)
 8000680:	f001 fdb7 	bl	80021f2 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x58>
  //Task 2
  status = xTaskCreate(task2_handler, "Task2", 200, "There I Go VA-U TASK-2!!!!!", 2, &task2_handle);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <main+0xa4>)
 80006ac:	22c8      	movs	r2, #200	; 0xc8
 80006ae:	4910      	ldr	r1, [pc, #64]	; (80006f0 <main+0xa8>)
 80006b0:	4810      	ldr	r0, [pc, #64]	; (80006f4 <main+0xac>)
 80006b2:	f001 fd9e 	bl	80021f2 <xTaskCreate>
 80006b6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00a      	beq.n	80006d4 <main+0x8c>
        __asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	60fb      	str	r3, [r7, #12]
    }
 80006d0:	bf00      	nop
 80006d2:	e7fe      	b.n	80006d2 <main+0x8a>
  /* USER CODE END 2 */
  vTaskStartScheduler();
 80006d4:	f001 ff18 	bl	8002508 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x90>
 80006da:	bf00      	nop
 80006dc:	e0001000 	.word	0xe0001000
 80006e0:	08005d04 	.word	0x08005d04
 80006e4:	08005d24 	.word	0x08005d24
 80006e8:	080008d1 	.word	0x080008d1
 80006ec:	08005d2c 	.word	0x08005d2c
 80006f0:	08005d48 	.word	0x08005d48
 80006f4:	0800090d 	.word	0x0800090d

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fea6 	bl	8005458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <SystemClock_Config+0xd8>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800076c:	2310      	movs	r3, #16
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000770:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000776:	2304      	movs	r3, #4
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ff90 	bl	80016ac <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 f8eb 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fc90 	bl	80010d8 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007be:	f000 f8d5 	bl	800096c <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	; 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xf0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000860:	f000 fc20 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0xf8>)
 800087c:	f000 fa7e 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0xf4>)
 800089c:	f000 fa6e 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xf4>)
 80008b8:	f000 fa60 	bl	8000d7c <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <task1_handler>:

/* USER CODE BEGIN 4 */
//Pointer to the fucntion for task create defined over here.
static void task1_handler(void *param)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09c      	sub	sp, #112	; 0x70
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100,"\n%s ", (char*)param);
 80008d8:	f107 000c 	add.w	r0, r7, #12
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <task1_handler+0x34>)
 80008e0:	2164      	movs	r1, #100	; 0x64
 80008e2:	f004 fdc1 	bl	8005468 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fd04 	bl	80052f8 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <task1_handler+0x38>)
 80008f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100,"\n%s ", (char*)param);
 8000900:	e7ea      	b.n	80008d8 <task1_handler+0x8>
 8000902:	bf00      	nop
 8000904:	08005d50 	.word	0x08005d50
 8000908:	e000ed04 	.word	0xe000ed04

0800090c <task2_handler>:
	}
}
static void task2_handler(void* param)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	; 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
		{
		snprintf(msg, 100,"\n%s ", (char*)param);
 8000914:	f107 000c 	add.w	r0, r7, #12
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <task2_handler+0x34>)
 800091c:	2164      	movs	r1, #100	; 0x64
 800091e:	f004 fda3 	bl	8005468 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fce6 	bl	80052f8 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <task2_handler+0x38>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100,"\n%s ", (char*)param);
 800093c:	e7ea      	b.n	8000914 <task2_handler+0x8>
 800093e:	bf00      	nop
 8000940:	08005d50 	.word	0x08005d50
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f90d 	bl	8000b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40001000 	.word	0x40001000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  vInitPrioGroupValue();
 80009b6:	f002 fa4f 	bl	8002e58 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2036      	movs	r0, #54	; 0x36
 80009de:	f000 f9a3 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e2:	2036      	movs	r0, #54	; 0x36
 80009e4:	f000 f9bc 	bl	8000d60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <HAL_InitTick+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_InitTick+0xa4>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0xa4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a04:	f107 0210 	add.w	r2, r7, #16
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fc68 	bl	80012e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a14:	f000 fc52 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_InitTick+0xa8>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	0c9b      	lsrs	r3, r3, #18
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_InitTick+0xac>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_InitTick+0xb0>)
 8000a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_InitTick+0xac>)
 8000a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_InitTick+0xac>)
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_InitTick+0xac>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_InitTick+0xac>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_InitTick+0xac>)
 8000a4e:	f001 f8cb 	bl	8001be8 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <HAL_InitTick+0xac>)
 8000a5a:	f001 f91f 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	2001439c 	.word	0x2001439c
 8000a78:	40001000 	.word	0x40001000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM6_DAC_IRQHandler+0x10>)
 8000aae:	f001 f965 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2001439c 	.word	0x2001439c

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff ffd7 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f004 fc63 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fd99 	bl	8000648 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b24:	08005ea0 	.word	0x08005ea0
  ldr r2, =_sbss
 8000b28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b2c:	200144a0 	.word	0x200144a0

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f8d8 	bl	8000d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ff30 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff ff06 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200143e4 	.word	0x200143e4

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200143e4 	.word	0x200143e4

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff4c 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3a:	f7ff ff61 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff ffb1 	bl	8000cac <NVIC_EncodePriority>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff80 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff54 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e165      	b.n	8001064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8154 	bne.w	800105e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ae 	beq.w	800105e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_GPIO_Init+0x300>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	; (800107c <HAL_GPIO_Init+0x300>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b5a      	ldr	r3, [pc, #360]	; (800107c <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a58      	ldr	r2, [pc, #352]	; (8001080 <HAL_GPIO_Init+0x304>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x308>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	; (8001088 <HAL_GPIO_Init+0x30c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	; (800108c <HAL_GPIO_Init+0x310>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	; (8001094 <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x206>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a49      	ldr	r2, [pc, #292]	; (800109c <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x202>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x304>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_GPIO_Init+0x324>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_GPIO_Init+0x324>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae96 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fcea 	bl	8000ba0 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fce6 	bl	8000ba0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20c      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f873 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fba2 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	08005e20 	.word	0x08005e20
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a9b      	lsrs	r3, r3, #10
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4903      	ldr	r1, [pc, #12]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08005e30 	.word	0x08005e30

080012e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	220f      	movs	r2, #15
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_RCC_GetClockConfig+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800134c:	b088      	sub	sp, #32
 800134e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	4bce      	ldr	r3, [pc, #824]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b0c      	cmp	r3, #12
 800136e:	f200 818d 	bhi.w	800168c <HAL_RCC_GetSysClockFreq+0x344>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <HAL_RCC_GetSysClockFreq+0x30>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013ad 	.word	0x080013ad
 800137c:	0800168d 	.word	0x0800168d
 8001380:	0800168d 	.word	0x0800168d
 8001384:	0800168d 	.word	0x0800168d
 8001388:	080013b3 	.word	0x080013b3
 800138c:	0800168d 	.word	0x0800168d
 8001390:	0800168d 	.word	0x0800168d
 8001394:	0800168d 	.word	0x0800168d
 8001398:	080013b9 	.word	0x080013b9
 800139c:	0800168d 	.word	0x0800168d
 80013a0:	0800168d 	.word	0x0800168d
 80013a4:	0800168d 	.word	0x0800168d
 80013a8:	0800152d 	.word	0x0800152d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ac:	4bbd      	ldr	r3, [pc, #756]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ae:	61bb      	str	r3, [r7, #24]
       break;
 80013b0:	e16f      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b2:	4bbd      	ldr	r3, [pc, #756]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x360>)
 80013b4:	61bb      	str	r3, [r7, #24]
      break;
 80013b6:	e16c      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4bb9      	ldr	r3, [pc, #740]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c2:	4bb7      	ldr	r3, [pc, #732]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d053      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ce:	4bb4      	ldr	r3, [pc, #720]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	461a      	mov	r2, r3
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	ea02 0400 	and.w	r4, r2, r0
 80013e6:	603c      	str	r4, [r7, #0]
 80013e8:	400b      	ands	r3, r1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	014b      	lsls	r3, r1, #5
 80013fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001402:	0142      	lsls	r2, r0, #5
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	4623      	mov	r3, r4
 800140a:	1ac0      	subs	r0, r0, r3
 800140c:	462b      	mov	r3, r5
 800140e:	eb61 0103 	sbc.w	r1, r1, r3
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	018b      	lsls	r3, r1, #6
 800141c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001420:	0182      	lsls	r2, r0, #6
 8001422:	1a12      	subs	r2, r2, r0
 8001424:	eb63 0301 	sbc.w	r3, r3, r1
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	00d9      	lsls	r1, r3, #3
 8001432:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001436:	00d0      	lsls	r0, r2, #3
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4621      	mov	r1, r4
 800143e:	1852      	adds	r2, r2, r1
 8001440:	4629      	mov	r1, r5
 8001442:	eb43 0101 	adc.w	r1, r3, r1
 8001446:	460b      	mov	r3, r1
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	0259      	lsls	r1, r3, #9
 8001452:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001456:	0250      	lsls	r0, r2, #9
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	461a      	mov	r2, r3
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	f7fe ff72 	bl	8000350 <__aeabi_uldivmod>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4613      	mov	r3, r2
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e04c      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	461a      	mov	r2, r3
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	ea02 0a00 	and.w	sl, r2, r0
 800148e:	ea03 0b01 	and.w	fp, r3, r1
 8001492:	4650      	mov	r0, sl
 8001494:	4659      	mov	r1, fp
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	014b      	lsls	r3, r1, #5
 80014a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014a4:	0142      	lsls	r2, r0, #5
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	ebb0 000a 	subs.w	r0, r0, sl
 80014ae:	eb61 010b 	sbc.w	r1, r1, fp
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	018b      	lsls	r3, r1, #6
 80014bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014c0:	0182      	lsls	r2, r0, #6
 80014c2:	1a12      	subs	r2, r2, r0
 80014c4:	eb63 0301 	sbc.w	r3, r3, r1
 80014c8:	f04f 0000 	mov.w	r0, #0
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	00d9      	lsls	r1, r3, #3
 80014d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014d6:	00d0      	lsls	r0, r2, #3
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	eb12 020a 	adds.w	r2, r2, sl
 80014e0:	eb43 030b 	adc.w	r3, r3, fp
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	0299      	lsls	r1, r3, #10
 80014ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80014f2:	0290      	lsls	r0, r2, #10
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	461a      	mov	r2, r3
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f7fe ff24 	bl	8000350 <__aeabi_uldivmod>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4613      	mov	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	61bb      	str	r3, [r7, #24]
      break;
 800152a:	e0b2      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001534:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001536:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d04d      	beq.n	80015de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001542:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	461a      	mov	r2, r3
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	ea02 0800 	and.w	r8, r2, r0
 800155a:	ea03 0901 	and.w	r9, r3, r1
 800155e:	4640      	mov	r0, r8
 8001560:	4649      	mov	r1, r9
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	014b      	lsls	r3, r1, #5
 800156c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001570:	0142      	lsls	r2, r0, #5
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	ebb0 0008 	subs.w	r0, r0, r8
 800157a:	eb61 0109 	sbc.w	r1, r1, r9
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	018b      	lsls	r3, r1, #6
 8001588:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800158c:	0182      	lsls	r2, r0, #6
 800158e:	1a12      	subs	r2, r2, r0
 8001590:	eb63 0301 	sbc.w	r3, r3, r1
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	f04f 0100 	mov.w	r1, #0
 800159c:	00d9      	lsls	r1, r3, #3
 800159e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015a2:	00d0      	lsls	r0, r2, #3
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	eb12 0208 	adds.w	r2, r2, r8
 80015ac:	eb43 0309 	adc.w	r3, r3, r9
 80015b0:	f04f 0000 	mov.w	r0, #0
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	0259      	lsls	r1, r3, #9
 80015ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015be:	0250      	lsls	r0, r2, #9
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f7fe febe 	bl	8000350 <__aeabi_uldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4613      	mov	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e04a      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	461a      	mov	r2, r3
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	ea02 0400 	and.w	r4, r2, r0
 80015f6:	ea03 0501 	and.w	r5, r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	014b      	lsls	r3, r1, #5
 8001608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800160c:	0142      	lsls	r2, r0, #5
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	1b00      	subs	r0, r0, r4
 8001614:	eb61 0105 	sbc.w	r1, r1, r5
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	018b      	lsls	r3, r1, #6
 8001622:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001626:	0182      	lsls	r2, r0, #6
 8001628:	1a12      	subs	r2, r2, r0
 800162a:	eb63 0301 	sbc.w	r3, r3, r1
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	00d9      	lsls	r1, r3, #3
 8001638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800163c:	00d0      	lsls	r0, r2, #3
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	1912      	adds	r2, r2, r4
 8001644:	eb45 0303 	adc.w	r3, r5, r3
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0299      	lsls	r1, r3, #10
 8001652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001656:	0290      	lsls	r0, r2, #10
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	461a      	mov	r2, r3
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	f7fe fe72 	bl	8000350 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	0f1b      	lsrs	r3, r3, #28
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	61bb      	str	r3, [r7, #24]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800168e:	61bb      	str	r3, [r7, #24]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	69bb      	ldr	r3, [r7, #24]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200

080016ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e28d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8083 	beq.w	80017d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d019      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d8:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f0:	d00c      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d112      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170a:	d10b      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x124>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d157      	bne.n	80017d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e25a      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x90>
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7b      	ldr	r2, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0xb4>
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a75      	ldr	r2, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fa0e 	bl	8000ba0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fa0a 	bl	8000ba0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e21f      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xdc>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9fa 	bl	8000ba0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f9f6 	bl	8000ba0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e20b      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x104>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06f      	beq.n	80018be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1d3      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f9a3 	bl	8000ba0 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff f99f 	bl	8000ba0 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1b4      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4925      	ldr	r1, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f982 	bl	8000ba0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f97e 	bl	8000ba0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e193      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d036      	beq.n	8001938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f962 	bl	8000ba0 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f95e 	bl	8000ba0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e173      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x234>
 80018fe:	e01b      	b.n	8001938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f94b 	bl	8000ba0 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	e00e      	b.n	800192c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f947 	bl	8000ba0 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d907      	bls.n	800192c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e15c      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001920:	40023800 	.word	0x40023800
 8001924:	42470000 	.word	0x42470000
 8001928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ea      	bne.n	800190e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8097 	beq.w	8001a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f907 	bl	8000ba0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff f903 	bl	8000ba0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e118      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x31e>
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x340>
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ec:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d015      	beq.n	8001a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8c8 	bl	8000ba0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f8c4 	bl	8000ba0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0d7      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ee      	beq.n	8001a14 <HAL_RCC_OscConfig+0x368>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f8b2 	bl	8000ba0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f8ae 	bl	8000ba0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0c1      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ee      	bne.n	8001a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ad 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d060      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d145      	bne.n	8001b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f882 	bl	8000ba0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f87e 	bl	8000ba0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e093      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	071b      	lsls	r3, r3, #28
 8001aea:	491b      	ldr	r1, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f853 	bl	8000ba0 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f84f 	bl	8000ba0 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e064      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x452>
 8001b1c:	e05c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f83c 	bl	8000ba0 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f838 	bl	8000ba0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x480>
 8001b4a:	e045      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e040      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x538>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d129      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d122      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d119      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9d8 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04e      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d01d      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8ee 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8e0 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8f1 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8c4 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8b6 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8c7 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f89a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f88c 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f89d 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f870 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f862 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f873 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd24 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f902 	bl	8002130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f838 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8cc 	bl	800211c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <TIM_Base_SetConfig+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <TIM_Base_SetConfig+0x124>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <TIM_Base_SetConfig+0x128>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <TIM_Base_SetConfig+0x130>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <TIM_Base_SetConfig+0x134>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <TIM_Base_SetConfig+0x138>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <TIM_Base_SetConfig+0x124>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40000c00 	.word	0x40000c00
 8002100:	40010400 	.word	0x40010400
 8002104:	40014000 	.word	0x40014000
 8002108:	40014400 	.word	0x40014400
 800210c:	40014800 	.word	0x40014800
 8002110:	40001800 	.word	0x40001800
 8002114:	40001c00 	.word	0x40001c00
 8002118:	40002000 	.word	0x40002000

0800211c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 0208 	add.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0208 	add.w	r2, r3, #8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6892      	ldr	r2, [r2, #8]
 80021b4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6852      	ldr	r2, [r2, #4]
 80021be:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d103      	bne.n	80021d2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b08c      	sub	sp, #48	; 0x30
 80021f6:	af04      	add	r7, sp, #16
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4618      	mov	r0, r3
 8002208:	f000 ffd0 	bl	80031ac <pvPortMalloc>
 800220c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002214:	2058      	movs	r0, #88	; 0x58
 8002216:	f000 ffc9 	bl	80031ac <pvPortMalloc>
 800221a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
 8002228:	e005      	b.n	8002236 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f001 f89e 	bl	800336c <vPortFree>
 8002230:	e001      	b.n	8002236 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	2300      	movs	r3, #0
 8002240:	9303      	str	r3, [sp, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f80e 	bl	8002274 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f000 f8af 	bl	80023bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e002      	b.n	800226a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800226a:	69bb      	ldr	r3, [r7, #24]
    }
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	21a5      	movs	r1, #165	; 0xa5
 800228e:	f003 f8e3 	bl	8005458 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800229c:	3b01      	subs	r3, #1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <prvInitialiseNewTask+0x58>
        __asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	617b      	str	r3, [r7, #20]
    }
 80022c8:	bf00      	nop
 80022ca:	e7fe      	b.n	80022ca <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01f      	beq.n	8002312 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e012      	b.n	80022fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	3334      	adds	r3, #52	; 0x34
 80022e8:	460a      	mov	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b09      	cmp	r3, #9
 8002302:	d9e9      	bls.n	80022d8 <prvInitialiseNewTask+0x64>
 8002304:	e000      	b.n	8002308 <prvInitialiseNewTask+0x94>
            {
                break;
 8002306:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002310:	e003      	b.n	800231a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	2b04      	cmp	r3, #4
 800231e:	d90a      	bls.n	8002336 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	613b      	str	r3, [r7, #16]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	2b04      	cmp	r3, #4
 800233a:	d901      	bls.n	8002340 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800233c:	2304      	movs	r3, #4
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002344:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800234a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	2200      	movs	r2, #0
 8002350:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	3304      	adds	r3, #4
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff14 	bl	8002184 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	3318      	adds	r3, #24
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff0f 	bl	8002184 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	f1c3 0205 	rsb	r2, r3, #5
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	3350      	adds	r3, #80	; 0x50
 8002380:	2204      	movs	r2, #4
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f867 	bl	8005458 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	3354      	adds	r3, #84	; 0x54
 800238e:	2201      	movs	r2, #1
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f003 f860 	bl	8005458 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	69b8      	ldr	r0, [r7, #24]
 800239e:	f000 fc2f 	bl	8002c00 <pxPortInitialiseStack>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023c4:	f000 fdc6 	bl	8002f54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <prvAddNewTaskToReadyList+0x134>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <prvAddNewTaskToReadyList+0x134>)
 80023d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023d2:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <prvAddNewTaskToReadyList+0x138>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023da:	4a46      	ldr	r2, [pc, #280]	; (80024f4 <prvAddNewTaskToReadyList+0x138>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <prvAddNewTaskToReadyList+0x134>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d110      	bne.n	800240a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023e8:	f000 fb70 	bl	8002acc <prvInitialiseTaskLists>
 80023ec:	e00d      	b.n	800240a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023ee:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <prvAddNewTaskToReadyList+0x13c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <prvAddNewTaskToReadyList+0x138>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d802      	bhi.n	800240a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <prvAddNewTaskToReadyList+0x138>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <prvAddNewTaskToReadyList+0x140>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	4a3a      	ldr	r2, [pc, #232]	; (80024fc <prvAddNewTaskToReadyList+0x140>)
 8002412:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <prvAddNewTaskToReadyList+0x140>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <prvAddNewTaskToReadyList+0x94>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fdc5 	bl	8004fb4 <SEGGER_SYSVIEW_OnTaskCreate>
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	461d      	mov	r5, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461c      	mov	r4, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	1ae3      	subs	r3, r4, r3
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	462b      	mov	r3, r5
 800244c:	f001 f954 	bl	80036f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fe32 	bl	80050bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	4b27      	ldr	r3, [pc, #156]	; (8002500 <prvAddNewTaskToReadyList+0x144>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	4a26      	ldr	r2, [pc, #152]	; (8002500 <prvAddNewTaskToReadyList+0x144>)
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246e:	4925      	ldr	r1, [pc, #148]	; (8002504 <prvAddNewTaskToReadyList+0x148>)
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3304      	adds	r3, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	3204      	adds	r2, #4
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <prvAddNewTaskToReadyList+0x148>)
 80024ae:	441a      	add	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	615a      	str	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <prvAddNewTaskToReadyList+0x148>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	480e      	ldr	r0, [pc, #56]	; (8002504 <prvAddNewTaskToReadyList+0x148>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4403      	add	r3, r0
 80024d4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024d6:	f000 fd6d 	bl	8002fb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <prvAddNewTaskToReadyList+0x13c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <prvAddNewTaskToReadyList+0x138>)
 80024e4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bdb0      	pop	{r4, r5, r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000016c 	.word	0x2000016c
 80024f4:	20000094 	.word	0x20000094
 80024f8:	20000178 	.word	0x20000178
 80024fc:	20000188 	.word	0x20000188
 8002500:	20000174 	.word	0x20000174
 8002504:	20000098 	.word	0x20000098

08002508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <vTaskStartScheduler+0x98>)
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2300      	movs	r3, #0
 8002518:	2282      	movs	r2, #130	; 0x82
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <vTaskStartScheduler+0x9c>)
 800251c:	4822      	ldr	r0, [pc, #136]	; (80025a8 <vTaskStartScheduler+0xa0>)
 800251e:	f7ff fe68 	bl	80021f2 <xTaskCreate>
 8002522:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d124      	bne.n	8002574 <vTaskStartScheduler+0x6c>
        __asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	60bb      	str	r3, [r7, #8]
    }
 800253c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <vTaskStartScheduler+0xa4>)
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <vTaskStartScheduler+0xa8>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <vTaskStartScheduler+0xac>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <vTaskStartScheduler+0xb0>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <vTaskStartScheduler+0x98>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d102      	bne.n	8002564 <vTaskStartScheduler+0x5c>
 800255e:	f002 fd0d 	bl	8004f7c <SEGGER_SYSVIEW_OnIdle>
 8002562:	e004      	b.n	800256e <vTaskStartScheduler+0x66>
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <vTaskStartScheduler+0xb0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fd65 	bl	8005038 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800256e:	f000 fbd1 	bl	8002d14 <xPortStartScheduler>
 8002572:	e00e      	b.n	8002592 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d10a      	bne.n	8002592 <vTaskStartScheduler+0x8a>
        __asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	607b      	str	r3, [r7, #4]
    }
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <vTaskStartScheduler+0xb4>)
 8002594:	681b      	ldr	r3, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000190 	.word	0x20000190
 80025a4:	08005d58 	.word	0x08005d58
 80025a8:	08002aa9 	.word	0x08002aa9
 80025ac:	2000018c 	.word	0x2000018c
 80025b0:	20000178 	.word	0x20000178
 80025b4:	20000170 	.word	0x20000170
 80025b8:	20000094 	.word	0x20000094
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <vTaskSuspendAll+0x18>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a03      	ldr	r2, [pc, #12]	; (80025d8 <vTaskSuspendAll+0x18>)
 80025cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000194 	.word	0x20000194

080025dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <xTaskResumeAll+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <xTaskResumeAll+0x2c>
        __asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	607b      	str	r3, [r7, #4]
    }
 8002604:	bf00      	nop
 8002606:	e7fe      	b.n	8002606 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002608:	f000 fca4 	bl	8002f54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800260c:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <xTaskResumeAll+0x1c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <xTaskResumeAll+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <xTaskResumeAll+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 80b8 	bne.w	8002790 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002620:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <xTaskResumeAll+0x1c8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80b3 	beq.w	8002790 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800262a:	e08e      	b.n	800274a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800262c:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <xTaskResumeAll+0x1cc>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	6a12      	ldr	r2, [r2, #32]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	69d2      	ldr	r2, [r2, #28]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3318      	adds	r3, #24
 8002656:	429a      	cmp	r2, r3
 8002658:	d103      	bne.n	8002662 <xTaskResumeAll+0x86>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2200      	movs	r2, #0
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	68d2      	ldr	r2, [r2, #12]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3304      	adds	r3, #4
 8002694:	429a      	cmp	r2, r3
 8002696:	d103      	bne.n	80026a0 <xTaskResumeAll+0xc4>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1e5a      	subs	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 fd02 	bl	80050bc <SEGGER_SYSVIEW_OnTaskStartReady>
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	2201      	movs	r2, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <xTaskResumeAll+0x1d0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	4a39      	ldr	r2, [pc, #228]	; (80027ac <xTaskResumeAll+0x1d0>)
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4938      	ldr	r1, [pc, #224]	; (80027b0 <xTaskResumeAll+0x1d4>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3304      	adds	r3, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	3204      	adds	r2, #4
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <xTaskResumeAll+0x1d4>)
 800270e:	441a      	add	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002718:	4925      	ldr	r1, [pc, #148]	; (80027b0 <xTaskResumeAll+0x1d4>)
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1c59      	adds	r1, r3, #1
 8002728:	4821      	ldr	r0, [pc, #132]	; (80027b0 <xTaskResumeAll+0x1d4>)
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4403      	add	r3, r0
 8002734:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <xTaskResumeAll+0x1d8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <xTaskResumeAll+0x1dc>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <xTaskResumeAll+0x1cc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f47f af6c 	bne.w	800262c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800275a:	f000 fa35 	bl	8002bc8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <xTaskResumeAll+0x1e0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800276a:	f000 f83b 	bl	80027e4 <xTaskIncrementTick>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <xTaskResumeAll+0x1dc>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	3b01      	subs	r3, #1
 800277e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f1      	bne.n	800276a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <xTaskResumeAll+0x1e0>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <xTaskResumeAll+0x1dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002790:	f000 fc10 	bl	8002fb4 <vPortExitCritical>

    return xAlreadyYielded;
 8002794:	697b      	ldr	r3, [r7, #20]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000194 	.word	0x20000194
 80027a4:	2000016c 	.word	0x2000016c
 80027a8:	2000012c 	.word	0x2000012c
 80027ac:	20000174 	.word	0x20000174
 80027b0:	20000098 	.word	0x20000098
 80027b4:	20000094 	.word	0x20000094
 80027b8:	20000180 	.word	0x20000180
 80027bc:	2000017c 	.word	0x2000017c

080027c0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027c6:	f000 fcb1 	bl	800312c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <xTaskGetTickCountFromISR+0x20>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027d4:	683b      	ldr	r3, [r7, #0]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000170 	.word	0x20000170

080027e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ee:	4b70      	ldr	r3, [pc, #448]	; (80029b0 <xTaskIncrementTick+0x1cc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80d1 	bne.w	800299a <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027f8:	4b6e      	ldr	r3, [pc, #440]	; (80029b4 <xTaskIncrementTick+0x1d0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002800:	4a6c      	ldr	r2, [pc, #432]	; (80029b4 <xTaskIncrementTick+0x1d0>)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d120      	bne.n	800284e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <xTaskIncrementTick+0x1d4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <xTaskIncrementTick+0x48>
        __asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	607b      	str	r3, [r7, #4]
    }
 8002828:	bf00      	nop
 800282a:	e7fe      	b.n	800282a <xTaskIncrementTick+0x46>
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <xTaskIncrementTick+0x1d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	4b62      	ldr	r3, [pc, #392]	; (80029bc <xTaskIncrementTick+0x1d8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a60      	ldr	r2, [pc, #384]	; (80029b8 <xTaskIncrementTick+0x1d4>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4a60      	ldr	r2, [pc, #384]	; (80029bc <xTaskIncrementTick+0x1d8>)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <xTaskIncrementTick+0x1dc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <xTaskIncrementTick+0x1dc>)
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	f000 f9bd 	bl	8002bc8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800284e:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <xTaskIncrementTick+0x1e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a3a      	ldr	r2, [r7, #32]
 8002854:	429a      	cmp	r2, r3
 8002856:	f0c0 80a5 	bcc.w	80029a4 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800285a:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <xTaskIncrementTick+0x1d4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002864:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <xTaskIncrementTick+0x1e0>)
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	601a      	str	r2, [r3, #0]
                    break;
 800286c:	e09a      	b.n	80029a4 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800286e:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <xTaskIncrementTick+0x1d4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	429a      	cmp	r2, r3
 8002884:	d203      	bcs.n	800288e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002886:	4a4f      	ldr	r2, [pc, #316]	; (80029c4 <xTaskIncrementTick+0x1e0>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800288c:	e08a      	b.n	80029a4 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	68d2      	ldr	r2, [r2, #12]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	6892      	ldr	r2, [r2, #8]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	3304      	adds	r3, #4
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d103      	bne.n	80028bc <xTaskIncrementTick+0xd8>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2200      	movs	r2, #0
 80028c0:	615a      	str	r2, [r3, #20]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01e      	beq.n	8002912 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	6a12      	ldr	r2, [r2, #32]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	69d2      	ldr	r2, [r2, #28]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3318      	adds	r3, #24
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d103      	bne.n	8002902 <xTaskIncrementTick+0x11e>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4618      	mov	r0, r3
 8002916:	f002 fbd1 	bl	80050bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	2201      	movs	r2, #1
 8002920:	409a      	lsls	r2, r3
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <xTaskIncrementTick+0x1e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <xTaskIncrementTick+0x1e4>)
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	4926      	ldr	r1, [pc, #152]	; (80029cc <xTaskIncrementTick+0x1e8>)
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	3204      	adds	r2, #4
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1d1a      	adds	r2, r3, #4
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <xTaskIncrementTick+0x1e8>)
 8002970:	441a      	add	r2, r3
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	615a      	str	r2, [r3, #20]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297a:	4914      	ldr	r1, [pc, #80]	; (80029cc <xTaskIncrementTick+0x1e8>)
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	4810      	ldr	r0, [pc, #64]	; (80029cc <xTaskIncrementTick+0x1e8>)
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4403      	add	r3, r0
 8002996:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002998:	e75f      	b.n	800285a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <xTaskIncrementTick+0x1ec>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <xTaskIncrementTick+0x1ec>)
 80029a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000194 	.word	0x20000194
 80029b4:	20000170 	.word	0x20000170
 80029b8:	20000124 	.word	0x20000124
 80029bc:	20000128 	.word	0x20000128
 80029c0:	20000184 	.word	0x20000184
 80029c4:	2000018c 	.word	0x2000018c
 80029c8:	20000174 	.word	0x20000174
 80029cc:	20000098 	.word	0x20000098
 80029d0:	2000017c 	.word	0x2000017c

080029d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <vTaskSwitchContext+0xbc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029e2:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <vTaskSwitchContext+0xc0>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80029e8:	e04d      	b.n	8002a86 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <vTaskSwitchContext+0xc0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <vTaskSwitchContext+0xc4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	f1c3 031f 	rsb	r3, r3, #31
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <vTaskSwitchContext+0xc8>)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	607b      	str	r3, [r7, #4]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <vTaskSwitchContext+0x5a>
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <vTaskSwitchContext+0xc8>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	3308      	adds	r3, #8
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d104      	bne.n	8002a60 <vTaskSwitchContext+0x8c>
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <vTaskSwitchContext+0xcc>)
 8002a68:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <vTaskSwitchContext+0xcc>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <vTaskSwitchContext+0xd0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d102      	bne.n	8002a7c <vTaskSwitchContext+0xa8>
 8002a76:	f002 fa81 	bl	8004f7c <SEGGER_SYSVIEW_OnIdle>
}
 8002a7a:	e004      	b.n	8002a86 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <vTaskSwitchContext+0xcc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fad9 	bl	8005038 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000194 	.word	0x20000194
 8002a94:	20000180 	.word	0x20000180
 8002a98:	20000174 	.word	0x20000174
 8002a9c:	20000098 	.word	0x20000098
 8002aa0:	20000094 	.word	0x20000094
 8002aa4:	20000190 	.word	0x20000190

08002aa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ab0:	f000 f84c 	bl	8002b4c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <prvIdleTask+0x20>)
 8002ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ac4:	e7f4      	b.n	8002ab0 <prvIdleTask+0x8>
 8002ac6:	bf00      	nop
 8002ac8:	e000ed04 	.word	0xe000ed04

08002acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	e00c      	b.n	8002af2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <prvInitialiseTaskLists+0x60>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fb2c 	bl	8002144 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3301      	adds	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d9ef      	bls.n	8002ad8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002af8:	480d      	ldr	r0, [pc, #52]	; (8002b30 <prvInitialiseTaskLists+0x64>)
 8002afa:	f7ff fb23 	bl	8002144 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002afe:	480d      	ldr	r0, [pc, #52]	; (8002b34 <prvInitialiseTaskLists+0x68>)
 8002b00:	f7ff fb20 	bl	8002144 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <prvInitialiseTaskLists+0x6c>)
 8002b06:	f7ff fb1d 	bl	8002144 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <prvInitialiseTaskLists+0x70>)
 8002b0c:	f7ff fb1a 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <prvInitialiseTaskLists+0x74>)
 8002b12:	f7ff fb17 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <prvInitialiseTaskLists+0x78>)
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <prvInitialiseTaskLists+0x64>)
 8002b1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <prvInitialiseTaskLists+0x7c>)
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <prvInitialiseTaskLists+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000098 	.word	0x20000098
 8002b30:	200000fc 	.word	0x200000fc
 8002b34:	20000110 	.word	0x20000110
 8002b38:	2000012c 	.word	0x2000012c
 8002b3c:	20000140 	.word	0x20000140
 8002b40:	20000158 	.word	0x20000158
 8002b44:	20000124 	.word	0x20000124
 8002b48:	20000128 	.word	0x20000128

08002b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b52:	e019      	b.n	8002b88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b54:	f000 f9fe 	bl	8002f54 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <prvCheckTasksWaitingTermination+0x50>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fb1a 	bl	800219e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <prvCheckTasksWaitingTermination+0x54>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <prvCheckTasksWaitingTermination+0x54>)
 8002b72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <prvCheckTasksWaitingTermination+0x58>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <prvCheckTasksWaitingTermination+0x58>)
 8002b7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b7e:	f000 fa19 	bl	8002fb4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f810 	bl	8002ba8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <prvCheckTasksWaitingTermination+0x58>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e1      	bne.n	8002b54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000140 	.word	0x20000140
 8002ba0:	2000016c 	.word	0x2000016c
 8002ba4:	20000154 	.word	0x20000154

08002ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fbd9 	bl	800336c <vPortFree>
                vPortFree( pxTCB );
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fbd6 	bl	800336c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <prvResetNextTaskUnblockTime+0x30>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d104      	bne.n	8002be0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <prvResetNextTaskUnblockTime+0x34>)
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bde:	e005      	b.n	8002bec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002be0:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <prvResetNextTaskUnblockTime+0x30>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <prvResetNextTaskUnblockTime+0x34>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000124 	.word	0x20000124
 8002bfc:	2000018c 	.word	0x2000018c

08002c00 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b04      	subs	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0201 	bic.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c30:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <pxPortInitialiseStack+0x64>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b14      	subs	r3, #20
 8002c3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3b04      	subs	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f06f 0202 	mvn.w	r2, #2
 8002c4e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3b20      	subs	r3, #32
 8002c54:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	08002c69 	.word	0x08002c69

08002c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <prvTaskExitError+0x54>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d00a      	beq.n	8002c92 <prvTaskExitError+0x2a>
        __asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	60fb      	str	r3, [r7, #12]
    }
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <prvTaskExitError+0x28>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	60bb      	str	r3, [r7, #8]
    }
 8002ca4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ca6:	bf00      	nop
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0fc      	beq.n	8002ca8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <pxCurrentTCBConst2>)
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	6808      	ldr	r0, [r1, #0]
 8002cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cca:	f380 8809 	msr	PSP, r0
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f380 8811 	msr	BASEPRI, r0
 8002cda:	4770      	bx	lr
 8002cdc:	f3af 8000 	nop.w

08002ce0 <pxCurrentTCBConst2>:
 8002ce0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop

08002ce8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ce8:	4808      	ldr	r0, [pc, #32]	; (8002d0c <prvPortStartFirstTask+0x24>)
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	6800      	ldr	r0, [r0, #0]
 8002cee:	f380 8808 	msr	MSP, r0
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8814 	msr	CONTROL, r0
 8002cfa:	b662      	cpsie	i
 8002cfc:	b661      	cpsie	f
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	df00      	svc	0
 8002d08:	bf00      	nop
 8002d0a:	0000      	.short	0x0000
 8002d0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop

08002d14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d1a:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <xPortStartScheduler+0x120>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <xPortStartScheduler+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10a      	bne.n	8002d3a <xPortStartScheduler+0x26>
        __asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	613b      	str	r3, [r7, #16]
    }
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <xPortStartScheduler+0x120>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <xPortStartScheduler+0x128>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10a      	bne.n	8002d5a <xPortStartScheduler+0x46>
        __asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	60fb      	str	r3, [r7, #12]
    }
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d5a:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <xPortStartScheduler+0x12c>)
 8002d5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <xPortStartScheduler+0x130>)
 8002d80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d88:	e009      	b.n	8002d9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <xPortStartScheduler+0x134>)
 8002d92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d0ef      	beq.n	8002d8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d00a      	beq.n	8002dcc <xPortStartScheduler+0xb8>
        __asm volatile
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
    }
 8002dc8:	bf00      	nop
 8002dca:	e7fe      	b.n	8002dca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <xPortStartScheduler+0x134>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dde:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <xPortStartScheduler+0x134>)
 8002de0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dea:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <xPortStartScheduler+0x138>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <xPortStartScheduler+0x138>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <xPortStartScheduler+0x138>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <xPortStartScheduler+0x138>)
 8002dfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e02:	f000 f963 	bl	80030cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <xPortStartScheduler+0x13c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e0c:	f000 f982 	bl	8003114 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <xPortStartScheduler+0x140>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <xPortStartScheduler+0x140>)
 8002e16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e1c:	f7ff ff64 	bl	8002ce8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e20:	f7ff fdd8 	bl	80029d4 <vTaskSwitchContext>
    prvTaskExitError();
 8002e24:	f7ff ff20 	bl	8002c68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00
 8002e38:	410fc271 	.word	0x410fc271
 8002e3c:	410fc270 	.word	0x410fc270
 8002e40:	e000e400 	.word	0xe000e400
 8002e44:	20000198 	.word	0x20000198
 8002e48:	2000019c 	.word	0x2000019c
 8002e4c:	e000ed20 	.word	0xe000ed20
 8002e50:	20000010 	.word	0x20000010
 8002e54:	e000ef34 	.word	0xe000ef34

08002e58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <vInitPrioGroupValue+0xe4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a37      	ldr	r2, [pc, #220]	; (8002f40 <vInitPrioGroupValue+0xe8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10a      	bne.n	8002e7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	613b      	str	r3, [r7, #16]
    }
 8002e7a:	bf00      	nop
 8002e7c:	e7fe      	b.n	8002e7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <vInitPrioGroupValue+0xe4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <vInitPrioGroupValue+0xec>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10a      	bne.n	8002e9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	60fb      	str	r3, [r7, #12]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <vInitPrioGroupValue+0xf0>)
 8002ea0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <vInitPrioGroupValue+0xf4>)
 8002ec4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ecc:	e009      	b.n	8002ee2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ed6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d0ef      	beq.n	8002ece <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00a      	beq.n	8002f10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60bb      	str	r3, [r7, #8]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <vInitPrioGroupValue+0xf8>)
 8002f24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00
 8002f40:	410fc271 	.word	0x410fc271
 8002f44:	410fc270 	.word	0x410fc270
 8002f48:	e000e400 	.word	0xe000e400
 8002f4c:	20000198 	.word	0x20000198
 8002f50:	2000019c 	.word	0x2000019c

08002f54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	607b      	str	r3, [r7, #4]
    }
 8002f6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <vPortEnterCritical+0x58>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <vPortEnterCritical+0x58>)
 8002f76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <vPortEnterCritical+0x58>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10f      	bne.n	8002fa0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <vPortEnterCritical+0x5c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	603b      	str	r3, [r7, #0]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vPortEnterCritical+0x4a>
    }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20000010 	.word	0x20000010
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <vPortExitCritical+0x50>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <vPortExitCritical+0x24>
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	607b      	str	r3, [r7, #4]
    }
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <vPortExitCritical+0x50>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <vPortExitCritical+0x50>)
 8002fe0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <vPortExitCritical+0x50>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <vPortExitCritical+0x42>
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ff4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000010 	.word	0x20000010
	...

08003010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003010:	f3ef 8009 	mrs	r0, PSP
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <pxCurrentTCBConst>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f01e 0f10 	tst.w	lr, #16
 8003020:	bf08      	it	eq
 8003022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302a:	6010      	str	r0, [r2, #0]
 800302c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003034:	f380 8811 	msr	BASEPRI, r0
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f7ff fcc8 	bl	80029d4 <vTaskSwitchContext>
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f380 8811 	msr	BASEPRI, r0
 800304c:	bc09      	pop	{r0, r3}
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003056:	f01e 0f10 	tst.w	lr, #16
 800305a:	bf08      	it	eq
 800305c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003060:	f380 8809 	msr	PSP, r0
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	f3af 8000 	nop.w

08003070 <pxCurrentTCBConst>:
 8003070:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
        __asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	607b      	str	r3, [r7, #4]
    }
 8003090:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003092:	f001 fef9 	bl	8004e88 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003096:	f7ff fba5 	bl	80027e4 <xTaskIncrementTick>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030a0:	f001 ff50 	bl	8004f44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <SysTick_Handler+0x50>)
 80030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e001      	b.n	80030b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030ae:	f001 ff2d 	bl	8004f0c <SEGGER_SYSVIEW_RecordExitISR>
 80030b2:	2300      	movs	r3, #0
 80030b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f383 8811 	msr	BASEPRI, r3
    }
 80030bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vPortSetupTimerInterrupt+0x38>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <vPortSetupTimerInterrupt+0x3c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0a      	ldr	r2, [pc, #40]	; (800310c <vPortSetupTimerInterrupt+0x40>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <vPortSetupTimerInterrupt+0x44>)
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e010 	.word	0xe000e010
 8003104:	e000e018 	.word	0xe000e018
 8003108:	20000000 	.word	0x20000000
 800310c:	10624dd3 	.word	0x10624dd3
 8003110:	e000e014 	.word	0xe000e014

08003114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003124 <vPortEnableVFP+0x10>
 8003118:	6801      	ldr	r1, [r0, #0]
 800311a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800311e:	6001      	str	r1, [r0, #0]
 8003120:	4770      	bx	lr
 8003122:	0000      	.short	0x0000
 8003124:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop

0800312c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003132:	f3ef 8305 	mrs	r3, IPSR
 8003136:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	d914      	bls.n	8003168 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <vPortValidateInterruptPriority+0x70>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <vPortValidateInterruptPriority+0x74>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	7afa      	ldrb	r2, [r7, #11]
 800314e:	429a      	cmp	r2, r3
 8003150:	d20a      	bcs.n	8003168 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	607b      	str	r3, [r7, #4]
    }
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003168:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <vPortValidateInterruptPriority+0x78>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <vPortValidateInterruptPriority+0x7c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d90a      	bls.n	800318e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	603b      	str	r3, [r7, #0]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <vPortValidateInterruptPriority+0x60>
    }
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e3f0 	.word	0xe000e3f0
 80031a0:	20000198 	.word	0x20000198
 80031a4:	e000ed0c 	.word	0xe000ed0c
 80031a8:	2000019c 	.word	0x2000019c

080031ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031b8:	f7ff fa02 	bl	80025c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031bc:	4b65      	ldr	r3, [pc, #404]	; (8003354 <pvPortMalloc+0x1a8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031c4:	f000 f934 	bl	8003430 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031c8:	4b63      	ldr	r3, [pc, #396]	; (8003358 <pvPortMalloc+0x1ac>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 80a7 	bne.w	8003324 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02d      	beq.n	8003238 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031dc:	2208      	movs	r2, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d227      	bcs.n	8003238 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031e8:	2208      	movs	r2, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d021      	beq.n	800323e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f023 0307 	bic.w	r3, r3, #7
 8003200:	3308      	adds	r3, #8
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d214      	bcs.n	8003232 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f023 0307 	bic.w	r3, r3, #7
 800320e:	3308      	adds	r3, #8
 8003210:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <pvPortMalloc+0x92>
        __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	617b      	str	r3, [r7, #20]
    }
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003236:	e002      	b.n	800323e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	e000      	b.n	8003240 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800323e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06e      	beq.n	8003324 <pvPortMalloc+0x178>
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <pvPortMalloc+0x1b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d869      	bhi.n	8003324 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <pvPortMalloc+0x1b4>)
 8003252:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003254:	4b42      	ldr	r3, [pc, #264]	; (8003360 <pvPortMalloc+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800325a:	e004      	b.n	8003266 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d903      	bls.n	8003278 <pvPortMalloc+0xcc>
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f1      	bne.n	800325c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <pvPortMalloc+0x1a8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	429a      	cmp	r2, r3
 8003280:	d050      	beq.n	8003324 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	4413      	add	r3, r2
 800328a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	2308      	movs	r3, #8
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d91f      	bls.n	80032e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <pvPortMalloc+0x120>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	613b      	str	r3, [r7, #16]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032de:	69b8      	ldr	r0, [r7, #24]
 80032e0:	f000 f908 	bl	80034f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <pvPortMalloc+0x1b0>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <pvPortMalloc+0x1b0>)
 80032f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <pvPortMalloc+0x1b0>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <pvPortMalloc+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d203      	bcs.n	8003306 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <pvPortMalloc+0x1b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <pvPortMalloc+0x1b8>)
 8003304:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <pvPortMalloc+0x1ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	431a      	orrs	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <pvPortMalloc+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <pvPortMalloc+0x1bc>)
 8003322:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003324:	f7ff f95a 	bl	80025dc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <pvPortMalloc+0x19c>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60fb      	str	r3, [r7, #12]
    }
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <pvPortMalloc+0x19a>
    return pvReturn;
 8003348:	69fb      	ldr	r3, [r7, #28]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20012da8 	.word	0x20012da8
 8003358:	20012dbc 	.word	0x20012dbc
 800335c:	20012dac 	.word	0x20012dac
 8003360:	20012da0 	.word	0x20012da0
 8003364:	20012db0 	.word	0x20012db0
 8003368:	20012db4 	.word	0x20012db4

0800336c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04d      	beq.n	800341a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800337e:	2308      	movs	r3, #8
 8003380:	425b      	negs	r3, r3
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <vPortFree+0xb8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <vPortFree+0x44>
        __asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	60fb      	str	r3, [r7, #12]
    }
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <vPortFree+0x62>
        __asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	60bb      	str	r3, [r7, #8]
    }
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <vPortFree+0xb8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01e      	beq.n	800341a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11a      	bne.n	800341a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <vPortFree+0xb8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	401a      	ands	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033f4:	f7ff f8e4 	bl	80025c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <vPortFree+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4413      	add	r3, r2
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <vPortFree+0xbc>)
 8003404:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003406:	6938      	ldr	r0, [r7, #16]
 8003408:	f000 f874 	bl	80034f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <vPortFree+0xc0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	4a06      	ldr	r2, [pc, #24]	; (800342c <vPortFree+0xc0>)
 8003414:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003416:	f7ff f8e1 	bl	80025dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20012dbc 	.word	0x20012dbc
 8003428:	20012dac 	.word	0x20012dac
 800342c:	20012db8 	.word	0x20012db8

08003430 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003436:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800343a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800343c:	4b27      	ldr	r3, [pc, #156]	; (80034dc <prvHeapInit+0xac>)
 800343e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3307      	adds	r3, #7
 800344e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <prvHeapInit+0xac>)
 8003460:	4413      	add	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <prvHeapInit+0xb0>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <prvHeapInit+0xb0>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800347c:	2208      	movs	r2, #8
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <prvHeapInit+0xb4>)
 8003490:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <prvHeapInit+0xb4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <prvHeapInit+0xb4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <prvHeapInit+0xb4>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <prvHeapInit+0xb8>)
 80034be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <prvHeapInit+0xbc>)
 80034c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <prvHeapInit+0xc0>)
 80034ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	200001a0 	.word	0x200001a0
 80034e0:	20012da0 	.word	0x20012da0
 80034e4:	20012da8 	.word	0x20012da8
 80034e8:	20012db0 	.word	0x20012db0
 80034ec:	20012dac 	.word	0x20012dac
 80034f0:	20012dbc 	.word	0x20012dbc

080034f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <prvInsertBlockIntoFreeList+0xac>)
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e002      	b.n	8003508 <prvInsertBlockIntoFreeList+0x14>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d8f7      	bhi.n	8003502 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4413      	add	r3, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	d108      	bne.n	8003536 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d118      	bne.n	800357c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d00d      	beq.n	8003572 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	441a      	add	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e008      	b.n	8003584 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <prvInsertBlockIntoFreeList+0xb0>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e003      	b.n	8003584 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d002      	beq.n	8003592 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20012da0 	.word	0x20012da0
 80035a4:	20012da8 	.word	0x20012da8

080035a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <_cbSendSystemDesc+0x14>)
 80035ae:	f001 fc15 	bl	8004ddc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80035b2:	4803      	ldr	r0, [pc, #12]	; (80035c0 <_cbSendSystemDesc+0x18>)
 80035b4:	f001 fc12 	bl	8004ddc <SEGGER_SYSVIEW_SendSysDesc>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	08005d60 	.word	0x08005d60
 80035c0:	08005d98 	.word	0x08005d98

080035c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80035d2:	4a06      	ldr	r2, [pc, #24]	; (80035ec <SEGGER_SYSVIEW_Conf+0x28>)
 80035d4:	f001 f888 	bl	80046e8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80035dc:	f001 f8c8 	bl	8004770 <SEGGER_SYSVIEW_SetRAMBase>
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000000 	.word	0x20000000
 80035e8:	080035a9 	.word	0x080035a9
 80035ec:	08005e38 	.word	0x08005e38

080035f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	e033      	b.n	8003664 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035fc:	491e      	ldr	r1, [pc, #120]	; (8003678 <_cbSendTaskList+0x88>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	491a      	ldr	r1, [pc, #104]	; (8003678 <_cbSendTaskList+0x88>)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	4c16      	ldr	r4, [pc, #88]	; (8003678 <_cbSendTaskList+0x88>)
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4423      	add	r3, r4
 800362c:	3308      	adds	r3, #8
 800362e:	681c      	ldr	r4, [r3, #0]
 8003630:	4d11      	ldr	r5, [pc, #68]	; (8003678 <_cbSendTaskList+0x88>)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	442b      	add	r3, r5
 800363e:	330c      	adds	r3, #12
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	4e0d      	ldr	r6, [pc, #52]	; (8003678 <_cbSendTaskList+0x88>)
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4433      	add	r3, r6
 8003650:	3310      	adds	r3, #16
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	462b      	mov	r3, r5
 8003658:	4622      	mov	r2, r4
 800365a:	f000 f8b5 	bl	80037c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3301      	adds	r3, #1
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <_cbSendTaskList+0x8c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d3c6      	bcc.n	80035fc <_cbSendTaskList+0xc>
  }
}
 800366e:	bf00      	nop
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003678:	20012dc0 	.word	0x20012dc0
 800367c:	20012e60 	.word	0x20012e60

08003680 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003686:	f7ff f89b 	bl	80027c0 <xTaskGetTickCountFromISR>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	f04f 0400 	mov.w	r4, #0
 80036a2:	f04f 0500 	mov.w	r5, #0
 80036a6:	015d      	lsls	r5, r3, #5
 80036a8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80036ac:	0154      	lsls	r4, r2, #5
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	1a12      	subs	r2, r2, r0
 80036b4:	eb63 0301 	sbc.w	r3, r3, r1
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	f04f 0500 	mov.w	r5, #0
 80036c0:	009d      	lsls	r5, r3, #2
 80036c2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80036c6:	0094      	lsls	r4, r2, #2
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	1812      	adds	r2, r2, r0
 80036ce:	eb41 0303 	adc.w	r3, r1, r3
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	00d9      	lsls	r1, r3, #3
 80036dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e0:	00d0      	lsls	r0, r2, #3
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80036ea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}

080036f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003706:	2205      	movs	r2, #5
 8003708:	492b      	ldr	r1, [pc, #172]	; (80037b8 <SYSVIEW_AddTask+0xc0>)
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f001 fe88 	bl	8005420 <memcmp>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d04b      	beq.n	80037ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b07      	cmp	r3, #7
 800371c:	d903      	bls.n	8003726 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800371e:	4828      	ldr	r0, [pc, #160]	; (80037c0 <SYSVIEW_AddTask+0xc8>)
 8003720:	f001 fdfe 	bl	8005320 <SEGGER_SYSVIEW_Warn>
    return;
 8003724:	e044      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	491b      	ldr	r1, [pc, #108]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3308      	adds	r3, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4916      	ldr	r1, [pc, #88]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	330c      	adds	r3, #12
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4910      	ldr	r1, [pc, #64]	; (80037c4 <SYSVIEW_AddTask+0xcc>)
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3310      	adds	r3, #16
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <SYSVIEW_AddTask+0xc4>)
 800379a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f80e 	bl	80037c8 <SYSVIEW_SendTaskInfo>
 80037ac:	e000      	b.n	80037b0 <SYSVIEW_AddTask+0xb8>
    return;
 80037ae:	bf00      	nop

}
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08005da8 	.word	0x08005da8
 80037bc:	20012e60 	.word	0x20012e60
 80037c0:	08005db0 	.word	0x08005db0
 80037c4:	20012dc0 	.word	0x20012dc0

080037c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	2214      	movs	r2, #20
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fe3a 	bl	8005458 <memset>
  TaskInfo.TaskID     = TaskID;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f9f5 	bl	8004bec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003802:	bf00      	nop
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <_DoInit+0x98>)
 8003814:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2203      	movs	r2, #3
 800381a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2203      	movs	r2, #3
 8003820:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <_DoInit+0x9c>)
 8003826:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a20      	ldr	r2, [pc, #128]	; (80038ac <_DoInit+0xa0>)
 800382c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003834:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <_DoInit+0x9c>)
 800384c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <_DoInit+0xa4>)
 8003852:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2210      	movs	r2, #16
 8003858:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3307      	adds	r3, #7
 8003870:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <_DoInit+0xa8>)
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003876:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <_DoInit+0xac>)
 800387e:	6810      	ldr	r0, [r2, #0]
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	8891      	ldrh	r1, [r2, #4]
 8003884:	7992      	ldrb	r2, [r2, #6]
 8003886:	8099      	strh	r1, [r3, #4]
 8003888:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800388a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003894:	f3bf 8f5f 	dmb	sy
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	200143e8 	.word	0x200143e8
 80038a8:	08005e00 	.word	0x08005e00
 80038ac:	20012e64 	.word	0x20012e64
 80038b0:	20013264 	.word	0x20013264
 80038b4:	08005e0c 	.word	0x08005e0c
 80038b8:	08005e10 	.word	0x08005e10

080038bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80038c8:	4b3e      	ldr	r3, [pc, #248]	; (80039c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <SEGGER_RTT_ReadNoLock+0x1e>
 80038d6:	f7ff ff99 	bl	800380c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3360      	adds	r3, #96	; 0x60
 80038e6:	4a37      	ldr	r2, [pc, #220]	; (80039c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80038e8:	4413      	add	r3, r2
 80038ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	429a      	cmp	r2, r3
 8003906:	d92b      	bls.n	8003960 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4293      	cmp	r3, r2
 8003918:	bf28      	it	cs
 800391a:	4613      	movcs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	4413      	add	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392e:	f001 fd85 	bl	800543c <memcpy>
    NumBytesRead += NumBytesRem;
 8003932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003958:	429a      	cmp	r2, r3
 800395a:	d101      	bne.n	8003960 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4293      	cmp	r3, r2
 800396e:	bf28      	it	cs
 8003970:	4613      	movcs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	4413      	add	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	6939      	ldr	r1, [r7, #16]
 8003988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398a:	f001 fd57 	bl	800543c <memcpy>
    NumBytesRead += NumBytesRem;
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	4413      	add	r3, r2
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200143e8 	.word	0x200143e8

080039c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80039d6:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80039e4:	f7ff ff12 	bl	800380c <_DoInit>
  SEGGER_RTT_LOCK();
 80039e8:	f3ef 8311 	mrs	r3, BASEPRI
 80039ec:	f04f 0120 	mov.w	r1, #32
 80039f0:	f381 8811 	msr	BASEPRI, r1
 80039f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039f6:	4b35      	ldr	r3, [pc, #212]	; (8003acc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80039f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80039fe:	6939      	ldr	r1, [r7, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3304      	adds	r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	dbeb      	blt.n	80039fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8003a26:	e000      	b.n	8003a2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003a28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	da3f      	bge.n	8003ab4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003a34:	6939      	ldr	r1, [r7, #16]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a48:	6939      	ldr	r1, [r7, #16]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	440b      	add	r3, r1
 8003a58:	3304      	adds	r3, #4
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a5e:	6939      	ldr	r1, [r7, #16]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a72:	6939      	ldr	r1, [r7, #16]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	3328      	adds	r3, #40	; 0x28
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a86:	6939      	ldr	r1, [r7, #16]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	3324      	adds	r3, #36	; 0x24
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003a9a:	6939      	ldr	r1, [r7, #16]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	332c      	adds	r3, #44	; 0x2c
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003aae:	f3bf 8f5f 	dmb	sy
 8003ab2:	e002      	b.n	8003aba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200143e8 	.word	0x200143e8

08003ad0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003aec:	f7ff fe8e 	bl	800380c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003af2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d82c      	bhi.n	8003b54 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003afa:	f3ef 8311 	mrs	r3, BASEPRI
 8003afe:	f04f 0120 	mov.w	r1, #32
 8003b02:	f381 8811 	msr	BASEPRI, r1
 8003b06:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	3360      	adds	r3, #96	; 0x60
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b44:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	e002      	b.n	8003b5a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	200143e8 	.word	0x200143e8

08003b68 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00f      	beq.n	8003b9e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003b7e:	e002      	b.n	8003b86 <_EncodeStr+0x1e>
      Len++;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	3301      	adds	r3, #1
 8003b84:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f6      	bne.n	8003b80 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d901      	bls.n	8003b9e <_EncodeStr+0x36>
      Len = Limit;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2bfe      	cmp	r3, #254	; 0xfe
 8003ba2:	d806      	bhi.n	8003bb2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	60fa      	str	r2, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e011      	b.n	8003bd6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	60fa      	str	r2, [r7, #12]
 8003bb8:	22ff      	movs	r2, #255	; 0xff
 8003bba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	60fa      	str	r2, [r7, #12]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	0a19      	lsrs	r1, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	60fa      	str	r2, [r7, #12]
 8003bd2:	b2ca      	uxtb	r2, r1
 8003bd4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003bda:	e00a      	b.n	8003bf2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	1c53      	adds	r3, r2, #1
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	60f9      	str	r1, [r7, #12]
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
    n++;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3f0      	bcc.n	8003bdc <_EncodeStr+0x74>
  }
  return pPayload;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <_HandleIncomingPacket+0xe0>)
 8003c28:	7e1b      	ldrb	r3, [r3, #24]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	1cfb      	adds	r3, r7, #3
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7ff fe43 	bl	80038bc <SEGGER_RTT_ReadNoLock>
 8003c36:	4603      	mov	r3, r0
 8003c38:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	dd54      	ble.n	8003cea <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d032      	beq.n	8003cac <_HandleIncomingPacket+0x8c>
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	dc42      	bgt.n	8003cd0 <_HandleIncomingPacket+0xb0>
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	dc16      	bgt.n	8003c7c <_HandleIncomingPacket+0x5c>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	dd3e      	ble.n	8003cd0 <_HandleIncomingPacket+0xb0>
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2b06      	cmp	r3, #6
 8003c56:	d83b      	bhi.n	8003cd0 <_HandleIncomingPacket+0xb0>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <_HandleIncomingPacket+0x40>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c83 	.word	0x08003c83
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c8f 	.word	0x08003c8f
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003c9b 	.word	0x08003c9b
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c7e:	d036      	beq.n	8003cee <_HandleIncomingPacket+0xce>
 8003c80:	e026      	b.n	8003cd0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003c82:	f000 fe39 	bl	80048f8 <SEGGER_SYSVIEW_Start>
      break;
 8003c86:	e037      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003c88:	f000 fef0 	bl	8004a6c <SEGGER_SYSVIEW_Stop>
      break;
 8003c8c:	e034      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003c8e:	f001 f8c9 	bl	8004e24 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003c92:	e031      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003c94:	f001 f88e 	bl	8004db4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003c98:	e02e      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003c9a:	f000 ff0d 	bl	8004ab8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003c9e:	e02b      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ca0:	f001 faec 	bl	800527c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ca4:	e028      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ca6:	f001 facb 	bl	8005240 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003caa:	e025      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <_HandleIncomingPacket+0xe0>)
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f7ff fe00 	bl	80038bc <SEGGER_RTT_ReadNoLock>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dd15      	ble.n	8003cf2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fa39 	bl	8005140 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003cce:	e010      	b.n	8003cf2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da0e      	bge.n	8003cf6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <_HandleIncomingPacket+0xe0>)
 8003cda:	7e1b      	ldrb	r3, [r3, #24]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	1cfb      	adds	r3, r7, #3
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7ff fdea 	bl	80038bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003ce8:	e005      	b.n	8003cf6 <_HandleIncomingPacket+0xd6>
    }
  }
 8003cea:	bf00      	nop
 8003cec:	e004      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <_HandleIncomingPacket+0xd8>
      break;
 8003cf6:	bf00      	nop
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2001427c 	.word	0x2001427c

08003d04 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d18:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1e:	e00b      	b.n	8003d38 <_TrySendOverflowPacket+0x34>
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	1c59      	adds	r1, r3, #1
 8003d28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	09db      	lsrs	r3, r3, #7
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d3c:	d8f0      	bhi.n	8003d20 <_TrySendOverflowPacket+0x1c>
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <_TrySendOverflowPacket+0xe0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	e00b      	b.n	8003d80 <_TrySendOverflowPacket+0x7c>
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	6279      	str	r1, [r7, #36]	; 0x24
 8003d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <_TrySendOverflowPacket+0x64>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7fc fa32 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003dac:	4603      	mov	r3, r0
 8003dae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003db6:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e004      	b.n	8003dd4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <_TrySendOverflowPacket+0xdc>)
 8003dd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003dd4:	693b      	ldr	r3, [r7, #16]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3730      	adds	r7, #48	; 0x30
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2001427c 	.word	0x2001427c
 8003de4:	e0001004 	.word	0xe0001004

08003de8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003df4:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <_SendPacket+0x1c0>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d010      	beq.n	8003e1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003dfc:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <_SendPacket+0x1c0>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a3 	beq.w	8003f4c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e06:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <_SendPacket+0x1c0>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d109      	bne.n	8003e22 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e0e:	f7ff ff79 	bl	8003d04 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e12:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <_SendPacket+0x1c0>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	f040 809a 	bne.w	8003f50 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003e1c:	e001      	b.n	8003e22 <_SendPacket+0x3a>
    goto Send;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <_SendPacket+0x3c>
Send:
 8003e22:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b1f      	cmp	r3, #31
 8003e28:	d809      	bhi.n	8003e3e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <_SendPacket+0x1c0>)
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 808b 	bne.w	8003f54 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b17      	cmp	r3, #23
 8003e42:	d807      	bhi.n	8003e54 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e03d      	b.n	8003ed0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e60:	d912      	bls.n	8003e88 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	09da      	lsrs	r2, r3, #7
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	60fa      	str	r2, [r7, #12]
 8003e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e006      	b.n	8003e96 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9a:	d912      	bls.n	8003ec2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	09da      	lsrs	r2, r3, #7
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	3a01      	subs	r2, #1
 8003eb4:	60fa      	str	r2, [r7, #12]
 8003eb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e006      	b.n	8003ed0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <_SendPacket+0x1c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <_SendPacket+0x1c0>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	e00b      	b.n	8003f02 <_SendPacket+0x11a>
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	1c59      	adds	r1, r3, #1
 8003ef2:	6279      	str	r1, [r7, #36]	; 0x24
 8003ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	09db      	lsrs	r3, r3, #7
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	2b7f      	cmp	r3, #127	; 0x7f
 8003f06:	d8f0      	bhi.n	8003eea <_SendPacket+0x102>
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f7fc f972 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	60d3      	str	r3, [r2, #12]
 8003f3c:	e00b      	b.n	8003f56 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e004      	b.n	8003f56 <_SendPacket+0x16e>
    goto SendDone;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <_SendPacket+0x16e>
      goto SendDone;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <_SendPacket+0x16e>
      goto SendDone;
 8003f54:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f58:	7e1b      	ldrb	r3, [r3, #24]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <_SendPacket+0x1c8>)
 8003f5e:	460b      	mov	r3, r1
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	440b      	add	r3, r1
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	336c      	adds	r3, #108	; 0x6c
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f6e:	7e1b      	ldrb	r3, [r3, #24]
 8003f70:	4618      	mov	r0, r3
 8003f72:	490f      	ldr	r1, [pc, #60]	; (8003fb0 <_SendPacket+0x1c8>)
 8003f74:	4603      	mov	r3, r0
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4403      	add	r3, r0
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3370      	adds	r3, #112	; 0x70
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d00b      	beq.n	8003f9e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f88:	789b      	ldrb	r3, [r3, #2]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d107      	bne.n	8003f9e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f94:	f7ff fe44 	bl	8003c20 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <_SendPacket+0x1c0>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003f9e:	bf00      	nop
 8003fa0:	3728      	adds	r7, #40	; 0x28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2001427c 	.word	0x2001427c
 8003fac:	e0001004 	.word	0xe0001004
 8003fb0:	200143e8 	.word	0x200143e8

08003fb4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	; 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d80a      	bhi.n	8003fe4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	1c59      	adds	r1, r3, #1
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6051      	str	r1, [r2, #4]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d15a      	bne.n	80040a2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	e00b      	b.n	8004026 <_StoreChar+0x72>
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	6279      	str	r1, [r7, #36]	; 0x24
 8004018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	09db      	lsrs	r3, r3, #7
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2b7f      	cmp	r3, #127	; 0x7f
 800402a:	d8f0      	bhi.n	800400e <_StoreChar+0x5a>
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	627a      	str	r2, [r7, #36]	; 0x24
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	2300      	movs	r3, #0
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e00b      	b.n	800405e <_StoreChar+0xaa>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	1c59      	adds	r1, r3, #1
 800404e:	61f9      	str	r1, [r7, #28]
 8004050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	09db      	lsrs	r3, r3, #7
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b7f      	cmp	r3, #127	; 0x7f
 8004062:	d8f0      	bhi.n	8004046 <_StoreChar+0x92>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	61fa      	str	r2, [r7, #28]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	221a      	movs	r2, #26
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff feb3 	bl	8003de8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fdbe 	bl	8003c08 <_PreparePacket>
 800408c:	4602      	mov	r2, r0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]
  }
}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80040be:	2301      	movs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80040c6:	e007      	b.n	80040d8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80040c8:	6a3a      	ldr	r2, [r7, #32]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	623b      	str	r3, [r7, #32]
    Width++;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d2f3      	bcs.n	80040c8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d901      	bls.n	80040ec <_PrintUnsigned+0x40>
    Width = NumDigits;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11f      	bne.n	8004136 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <_PrintUnsigned+0x66>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <_PrintUnsigned+0x66>
        c = '0';
 800410c:	2330      	movs	r3, #48	; 0x30
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e001      	b.n	8004116 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004112:	2320      	movs	r3, #32
 8004114:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004116:	e007      	b.n	8004128 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	3b01      	subs	r3, #1
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800411e:	7efb      	ldrb	r3, [r7, #27]
 8004120:	4619      	mov	r1, r3
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff46 	bl	8003fb4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <_PrintUnsigned+0x8a>
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	429a      	cmp	r2, r3
 8004134:	d3f0      	bcc.n	8004118 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d903      	bls.n	8004144 <_PrintUnsigned+0x98>
      NumDigits--;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	e009      	b.n	8004158 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d200      	bcs.n	8004158 <_PrintUnsigned+0xac>
        break;
 8004156:	e005      	b.n	8004164 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004162:	e7e8      	b.n	8004136 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <_PrintUnsigned+0x128>)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4413      	add	r3, r2
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	4619      	mov	r1, r3
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ff14 	bl	8003fb4 <_StoreChar>
    Digit /= Base;
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041ac:	e006      	b.n	80041bc <_PrintUnsigned+0x110>
        FieldWidth--;
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	3b01      	subs	r3, #1
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80041b4:	2120      	movs	r1, #32
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f7ff fefc 	bl	8003fb4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <_PrintUnsigned+0x11e>
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3f1      	bcc.n	80041ae <_PrintUnsigned+0x102>
      }
    }
  }
}
 80041ca:	bf00      	nop
 80041cc:	3728      	adds	r7, #40	; 0x28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	08005e4c 	.word	0x08005e4c

080041d8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bfb8      	it	lt
 80041ec:	425b      	neglt	r3, r3
 80041ee:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80041f0:	2301      	movs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80041f4:	e007      	b.n	8004206 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80041fe:	613b      	str	r3, [r7, #16]
    Width++;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3301      	adds	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	daf3      	bge.n	80041f6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	429a      	cmp	r2, r3
 8004214:	d901      	bls.n	800421a <_PrintInt+0x42>
    Width = NumDigits;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <_PrintInt+0x5e>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db04      	blt.n	8004230 <_PrintInt+0x58>
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <_PrintInt+0x5e>
    FieldWidth--;
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	3b01      	subs	r3, #1
 8004234:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <_PrintInt+0x6e>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <_PrintInt+0x9c>
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00e      	beq.n	8004274 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004256:	e006      	b.n	8004266 <_PrintInt+0x8e>
        FieldWidth--;
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	3b01      	subs	r3, #1
 800425c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800425e:	2120      	movs	r1, #32
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fea7 	bl	8003fb4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <_PrintInt+0x9c>
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	429a      	cmp	r2, r3
 8004272:	d3f1      	bcc.n	8004258 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	da07      	bge.n	800428a <_PrintInt+0xb2>
    v = -v;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	425b      	negs	r3, r3
 800427e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004280:	212d      	movs	r1, #45	; 0x2d
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f7ff fe96 	bl	8003fb4 <_StoreChar>
 8004288:	e008      	b.n	800429c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004294:	212b      	movs	r1, #43	; 0x2b
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fe8c 	bl	8003fb4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d019      	beq.n	80042da <_PrintInt+0x102>
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d114      	bne.n	80042da <_PrintInt+0x102>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d111      	bne.n	80042da <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00e      	beq.n	80042da <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042bc:	e006      	b.n	80042cc <_PrintInt+0xf4>
        FieldWidth--;
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80042c4:	2130      	movs	r1, #48	; 0x30
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f7ff fe74 	bl	8003fb4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <_PrintInt+0x102>
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3f1      	bcc.n	80042be <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff fedf 	bl	80040ac <_PrintUnsigned>
}
 80042ee:	bf00      	nop
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b098      	sub	sp, #96	; 0x60
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004304:	f3ef 8311 	mrs	r3, BASEPRI
 8004308:	f04f 0120 	mov.w	r1, #32
 800430c:	f381 8811 	msr	BASEPRI, r1
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
 8004312:	48b7      	ldr	r0, [pc, #732]	; (80045f0 <_VPrintTarget+0x2f8>)
 8004314:	f7ff fc78 	bl	8003c08 <_PreparePacket>
 8004318:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800431a:	4bb5      	ldr	r3, [pc, #724]	; (80045f0 <_VPrintTarget+0x2f8>)
 800431c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3301      	adds	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800433e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8183 	beq.w	800464e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800434c:	2b25      	cmp	r3, #37	; 0x25
 800434e:	f040 8170 	bne.w	8004632 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004352:	2300      	movs	r3, #0
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004366:	3b23      	subs	r3, #35	; 0x23
 8004368:	2b0d      	cmp	r3, #13
 800436a:	d83f      	bhi.n	80043ec <_VPrintTarget+0xf4>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <_VPrintTarget+0x7c>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043dd 	.word	0x080043dd
 8004378:	080043ed 	.word	0x080043ed
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043ed 	.word	0x080043ed
 8004384:	080043ed 	.word	0x080043ed
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043ed 	.word	0x080043ed
 8004394:	080043cd 	.word	0x080043cd
 8004398:	080043ed 	.word	0x080043ed
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043bd 	.word	0x080043bd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e01a      	b.n	80043f2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80043bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043be:	f043 0302 	orr.w	r3, r3, #2
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e012      	b.n	80043f2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80043cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3301      	adds	r3, #1
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e00a      	b.n	80043f2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80043dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043de:	f043 0308 	orr.w	r3, r3, #8
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	e002      	b.n	80043f2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80043ec:	2300      	movs	r3, #0
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
 80043f0:	bf00      	nop
        }
      } while (v);
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1b0      	bne.n	800435a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80043f8:	2300      	movs	r3, #0
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004408:	2b2f      	cmp	r3, #47	; 0x2f
 800440a:	d912      	bls.n	8004432 <_VPrintTarget+0x13a>
 800440c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004410:	2b39      	cmp	r3, #57	; 0x39
 8004412:	d80e      	bhi.n	8004432 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800441a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	461a      	mov	r2, r3
 8004426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800442a:	4413      	add	r3, r2
 800442c:	3b30      	subs	r3, #48	; 0x30
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004430:	e7e4      	b.n	80043fc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004432:	2300      	movs	r3, #0
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800443e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004442:	2b2e      	cmp	r3, #46	; 0x2e
 8004444:	d11d      	bne.n	8004482 <_VPrintTarget+0x18a>
        sFormat++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004458:	2b2f      	cmp	r3, #47	; 0x2f
 800445a:	d912      	bls.n	8004482 <_VPrintTarget+0x18a>
 800445c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004460:	2b39      	cmp	r3, #57	; 0x39
 8004462:	d80e      	bhi.n	8004482 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800446a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	461a      	mov	r2, r3
 8004476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800447a:	4413      	add	r3, r2
 800447c:	3b30      	subs	r3, #48	; 0x30
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004480:	e7e4      	b.n	800444c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800448a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800448e:	2b6c      	cmp	r3, #108	; 0x6c
 8004490:	d003      	beq.n	800449a <_VPrintTarget+0x1a2>
 8004492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004496:	2b68      	cmp	r3, #104	; 0x68
 8004498:	d107      	bne.n	80044aa <_VPrintTarget+0x1b2>
          c = *sFormat;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80044a8:	e7ef      	b.n	800448a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80044aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044ae:	2b25      	cmp	r3, #37	; 0x25
 80044b0:	f000 80b3 	beq.w	800461a <_VPrintTarget+0x322>
 80044b4:	2b25      	cmp	r3, #37	; 0x25
 80044b6:	f2c0 80b7 	blt.w	8004628 <_VPrintTarget+0x330>
 80044ba:	2b78      	cmp	r3, #120	; 0x78
 80044bc:	f300 80b4 	bgt.w	8004628 <_VPrintTarget+0x330>
 80044c0:	2b58      	cmp	r3, #88	; 0x58
 80044c2:	f2c0 80b1 	blt.w	8004628 <_VPrintTarget+0x330>
 80044c6:	3b58      	subs	r3, #88	; 0x58
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	f200 80ad 	bhi.w	8004628 <_VPrintTarget+0x330>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <_VPrintTarget+0x1dc>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080045cb 	.word	0x080045cb
 80044d8:	08004629 	.word	0x08004629
 80044dc:	08004629 	.word	0x08004629
 80044e0:	08004629 	.word	0x08004629
 80044e4:	08004629 	.word	0x08004629
 80044e8:	08004629 	.word	0x08004629
 80044ec:	08004629 	.word	0x08004629
 80044f0:	08004629 	.word	0x08004629
 80044f4:	08004629 	.word	0x08004629
 80044f8:	08004629 	.word	0x08004629
 80044fc:	08004629 	.word	0x08004629
 8004500:	08004559 	.word	0x08004559
 8004504:	0800457f 	.word	0x0800457f
 8004508:	08004629 	.word	0x08004629
 800450c:	08004629 	.word	0x08004629
 8004510:	08004629 	.word	0x08004629
 8004514:	08004629 	.word	0x08004629
 8004518:	08004629 	.word	0x08004629
 800451c:	08004629 	.word	0x08004629
 8004520:	08004629 	.word	0x08004629
 8004524:	08004629 	.word	0x08004629
 8004528:	08004629 	.word	0x08004629
 800452c:	08004629 	.word	0x08004629
 8004530:	08004629 	.word	0x08004629
 8004534:	080045f5 	.word	0x080045f5
 8004538:	08004629 	.word	0x08004629
 800453c:	08004629 	.word	0x08004629
 8004540:	08004629 	.word	0x08004629
 8004544:	08004629 	.word	0x08004629
 8004548:	080045a5 	.word	0x080045a5
 800454c:	08004629 	.word	0x08004629
 8004550:	08004629 	.word	0x08004629
 8004554:	080045cb 	.word	0x080045cb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800456c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd1c 	bl	8003fb4 <_StoreChar>
        break;
 800457c:	e055      	b.n	800462a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1d19      	adds	r1, r3, #4
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6011      	str	r1, [r2, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800458c:	f107 0014 	add.w	r0, r7, #20
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	220a      	movs	r2, #10
 800459c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800459e:	f7ff fe1b 	bl	80041d8 <_PrintInt>
        break;
 80045a2:	e042      	b.n	800462a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6011      	str	r1, [r2, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80045b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045b4:	f107 0014 	add.w	r0, r7, #20
 80045b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c2:	220a      	movs	r2, #10
 80045c4:	f7ff fd72 	bl	80040ac <_PrintUnsigned>
        break;
 80045c8:	e02f      	b.n	800462a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	1d19      	adds	r1, r3, #4
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6011      	str	r1, [r2, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80045d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045da:	f107 0014 	add.w	r0, r7, #20
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	2210      	movs	r2, #16
 80045ea:	f7ff fd5f 	bl	80040ac <_PrintUnsigned>
        break;
 80045ee:	e01c      	b.n	800462a <_VPrintTarget+0x332>
 80045f0:	200142ac 	.word	0x200142ac
      case 'p':
        v = va_arg(*pParamList, int);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6011      	str	r1, [r2, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004602:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004604:	f107 0014 	add.w	r0, r7, #20
 8004608:	2300      	movs	r3, #0
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2308      	movs	r3, #8
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2308      	movs	r3, #8
 8004612:	2210      	movs	r2, #16
 8004614:	f7ff fd4a 	bl	80040ac <_PrintUnsigned>
        break;
 8004618:	e007      	b.n	800462a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800461a:	f107 0314 	add.w	r3, r7, #20
 800461e:	2125      	movs	r1, #37	; 0x25
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fcc7 	bl	8003fb4 <_StoreChar>
        break;
 8004626:	e000      	b.n	800462a <_VPrintTarget+0x332>
      default:
        break;
 8004628:	bf00      	nop
      }
      sFormat++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e007      	b.n	8004642 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004632:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fcb9 	bl	8003fb4 <_StoreChar>
    }
  } while (*sFormat);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f47f ae72 	bne.w	8004330 <_VPrintTarget+0x38>
 800464c:	e000      	b.n	8004650 <_VPrintTarget+0x358>
      break;
 800464e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d041      	beq.n	80046da <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004666:	e00b      	b.n	8004680 <_VPrintTarget+0x388>
 8004668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	6439      	str	r1, [r7, #64]	; 0x40
 8004672:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	09db      	lsrs	r3, r3, #7
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004682:	2b7f      	cmp	r3, #127	; 0x7f
 8004684:	d8f0      	bhi.n	8004668 <_VPrintTarget+0x370>
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	643a      	str	r2, [r7, #64]	; 0x40
 800468c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004694:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
 800469a:	2300      	movs	r3, #0
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	e00b      	b.n	80046b8 <_VPrintTarget+0x3c0>
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80046aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	2b7f      	cmp	r3, #127	; 0x7f
 80046bc:	d8f0      	bhi.n	80046a0 <_VPrintTarget+0x3a8>
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80046c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	221a      	movs	r2, #26
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fb87 	bl	8003de8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80046e0:	bf00      	nop
 80046e2:	3758      	adds	r7, #88	; 0x58
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80046f6:	2300      	movs	r3, #0
 80046f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046fc:	4917      	ldr	r1, [pc, #92]	; (800475c <SEGGER_SYSVIEW_Init+0x74>)
 80046fe:	4818      	ldr	r0, [pc, #96]	; (8004760 <SEGGER_SYSVIEW_Init+0x78>)
 8004700:	f7ff f962 	bl	80039c8 <SEGGER_RTT_AllocUpBuffer>
 8004704:	4603      	mov	r3, r0
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 800470a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 800470e:	785a      	ldrb	r2, [r3, #1]
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004712:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004716:	7e1b      	ldrb	r3, [r3, #24]
 8004718:	4618      	mov	r0, r3
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2308      	movs	r3, #8
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <SEGGER_SYSVIEW_Init+0x80>)
 8004722:	490f      	ldr	r1, [pc, #60]	; (8004760 <SEGGER_SYSVIEW_Init+0x78>)
 8004724:	f7ff f9d4 	bl	8003ad0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <SEGGER_SYSVIEW_Init+0x84>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004734:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004736:	4a0b      	ldr	r2, [pc, #44]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800473c:	4a09      	ldr	r2, [pc, #36]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004748:	4a06      	ldr	r2, [pc, #24]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <SEGGER_SYSVIEW_Init+0x7c>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20013274 	.word	0x20013274
 8004760:	08005e18 	.word	0x08005e18
 8004764:	2001427c 	.word	0x2001427c
 8004768:	20014274 	.word	0x20014274
 800476c:	e0001004 	.word	0xe0001004

08004770 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6113      	str	r3, [r2, #16]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	2001427c 	.word	0x2001427c

08004790 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004798:	f3ef 8311 	mrs	r3, BASEPRI
 800479c:	f04f 0120 	mov.w	r1, #32
 80047a0:	f381 8811 	msr	BASEPRI, r1
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4808      	ldr	r0, [pc, #32]	; (80047c8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047a8:	f7ff fa2e 	bl	8003c08 <_PreparePacket>
 80047ac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68b8      	ldr	r0, [r7, #8]
 80047b4:	f7ff fb18 	bl	8003de8 <_SendPacket>
  RECORD_END();
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f383 8811 	msr	BASEPRI, r3
}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	200142ac 	.word	0x200142ac

080047cc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047d6:	f3ef 8311 	mrs	r3, BASEPRI
 80047da:	f04f 0120 	mov.w	r1, #32
 80047de:	f381 8811 	msr	BASEPRI, r1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	4816      	ldr	r0, [pc, #88]	; (8004840 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80047e6:	f7ff fa0f 	bl	8003c08 <_PreparePacket>
 80047ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	e00b      	b.n	8004812 <SEGGER_SYSVIEW_RecordU32+0x46>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	61f9      	str	r1, [r7, #28]
 8004804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	09db      	lsrs	r3, r3, #7
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b7f      	cmp	r3, #127	; 0x7f
 8004816:	d8f0      	bhi.n	80047fa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	61fa      	str	r2, [r7, #28]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	68f9      	ldr	r1, [r7, #12]
 800482c:	6938      	ldr	r0, [r7, #16]
 800482e:	f7ff fadb 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f383 8811 	msr	BASEPRI, r3
}
 8004838:	bf00      	nop
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200142ac 	.word	0x200142ac

08004844 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	; 0x30
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004850:	f3ef 8311 	mrs	r3, BASEPRI
 8004854:	f04f 0120 	mov.w	r1, #32
 8004858:	f381 8811 	msr	BASEPRI, r1
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	4825      	ldr	r0, [pc, #148]	; (80048f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004860:	f7ff f9d2 	bl	8003c08 <_PreparePacket>
 8004864:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
 8004872:	e00b      	b.n	800488c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800487e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	09db      	lsrs	r3, r3, #7
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b7f      	cmp	r3, #127	; 0x7f
 8004890:	d8f0      	bhi.n	8004874 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	e00b      	b.n	80048c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	6279      	str	r1, [r7, #36]	; 0x24
 80048b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	09db      	lsrs	r3, r3, #7
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2b7f      	cmp	r3, #127	; 0x7f
 80048c8:	d8f0      	bhi.n	80048ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	627a      	str	r2, [r7, #36]	; 0x24
 80048d0:	6a3a      	ldr	r2, [r7, #32]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	6979      	ldr	r1, [r7, #20]
 80048de:	69b8      	ldr	r0, [r7, #24]
 80048e0:	f7ff fa82 	bl	8003de8 <_SendPacket>
  RECORD_END();
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f383 8811 	msr	BASEPRI, r3
}
 80048ea:	bf00      	nop
 80048ec:	3730      	adds	r7, #48	; 0x30
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200142ac 	.word	0x200142ac

080048f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	; 0x30
 80048fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80048fe:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004904:	f3ef 8311 	mrs	r3, BASEPRI
 8004908:	f04f 0120 	mov.w	r1, #32
 800490c:	f381 8811 	msr	BASEPRI, r1
 8004910:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004912:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 8004914:	785b      	ldrb	r3, [r3, #1]
 8004916:	220a      	movs	r2, #10
 8004918:	4952      	ldr	r1, [pc, #328]	; (8004a64 <SEGGER_SYSVIEW_Start+0x16c>)
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fc78 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004926:	200a      	movs	r0, #10
 8004928:	f7ff ff32 	bl	8004790 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800492c:	f3ef 8311 	mrs	r3, BASEPRI
 8004930:	f04f 0120 	mov.w	r1, #32
 8004934:	f381 8811 	msr	BASEPRI, r1
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	484b      	ldr	r0, [pc, #300]	; (8004a68 <SEGGER_SYSVIEW_Start+0x170>)
 800493c:	f7ff f964 	bl	8003c08 <_PreparePacket>
 8004940:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	4b45      	ldr	r3, [pc, #276]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004950:	e00b      	b.n	800496a <SEGGER_SYSVIEW_Start+0x72>
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	1c59      	adds	r1, r3, #1
 800495a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800495c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	09db      	lsrs	r3, r3, #7
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b7f      	cmp	r3, #127	; 0x7f
 800496e:	d8f0      	bhi.n	8004952 <SEGGER_SYSVIEW_Start+0x5a>
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	e00b      	b.n	80049a4 <SEGGER_SYSVIEW_Start+0xac>
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	6279      	str	r1, [r7, #36]	; 0x24
 8004996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	2b7f      	cmp	r3, #127	; 0x7f
 80049a8:	d8f0      	bhi.n	800498c <SEGGER_SYSVIEW_Start+0x94>
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	627a      	str	r2, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e00b      	b.n	80049de <SEGGER_SYSVIEW_Start+0xe6>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	61f9      	str	r1, [r7, #28]
 80049d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b7f      	cmp	r3, #127	; 0x7f
 80049e2:	d8f0      	bhi.n	80049c6 <SEGGER_SYSVIEW_Start+0xce>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e00b      	b.n	8004a16 <SEGGER_SYSVIEW_Start+0x11e>
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	6179      	str	r1, [r7, #20]
 8004a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	09db      	lsrs	r3, r3, #7
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b7f      	cmp	r3, #127	; 0x7f
 8004a1a:	d8f0      	bhi.n	80049fe <SEGGER_SYSVIEW_Start+0x106>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	617a      	str	r2, [r7, #20]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a2c:	2218      	movs	r2, #24
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff f9d9 	bl	8003de8 <_SendPacket>
      RECORD_END();
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a3c:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <SEGGER_SYSVIEW_Start+0x168>)
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a4a:	f000 f9eb 	bl	8004e24 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a4e:	f000 f9b1 	bl	8004db4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a52:	f000 fc13 	bl	800527c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a56:	bf00      	nop
 8004a58:	3730      	adds	r7, #48	; 0x30
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	2001427c 	.word	0x2001427c
 8004a64:	08005e40 	.word	0x08005e40
 8004a68:	200142ac 	.word	0x200142ac

08004a6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a72:	f3ef 8311 	mrs	r3, BASEPRI
 8004a76:	f04f 0120 	mov.w	r1, #32
 8004a7a:	f381 8811 	msr	BASEPRI, r1
 8004a7e:	607b      	str	r3, [r7, #4]
 8004a80:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004a82:	f7ff f8c1 	bl	8003c08 <_PreparePacket>
 8004a86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004a90:	220b      	movs	r2, #11
 8004a92:	6839      	ldr	r1, [r7, #0]
 8004a94:	6838      	ldr	r0, [r7, #0]
 8004a96:	f7ff f9a7 	bl	8003de8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f383 8811 	msr	BASEPRI, r3
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200142ac 	.word	0x200142ac
 8004ab4:	2001427c 	.word	0x2001427c

08004ab8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08c      	sub	sp, #48	; 0x30
 8004abc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	f04f 0120 	mov.w	r1, #32
 8004ac6:	f381 8811 	msr	BASEPRI, r1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	4845      	ldr	r0, [pc, #276]	; (8004be4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004ace:	f7ff f89b 	bl	8003c08 <_PreparePacket>
 8004ad2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae2:	e00b      	b.n	8004afc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	2b7f      	cmp	r3, #127	; 0x7f
 8004b00:	d8f0      	bhi.n	8004ae4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	e00b      	b.n	8004b36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	6279      	str	r1, [r7, #36]	; 0x24
 8004b28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3a:	d8f0      	bhi.n	8004b1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	627a      	str	r2, [r7, #36]	; 0x24
 8004b42:	6a3a      	ldr	r2, [r7, #32]
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e00b      	b.n	8004b70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	61f9      	str	r1, [r7, #28]
 8004b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	09db      	lsrs	r3, r3, #7
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b7f      	cmp	r3, #127	; 0x7f
 8004b74:	d8f0      	bhi.n	8004b58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	61fa      	str	r2, [r7, #28]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e00b      	b.n	8004ba8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	6179      	str	r1, [r7, #20]
 8004b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	09db      	lsrs	r3, r3, #7
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bac:	d8f0      	bhi.n	8004b90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	617a      	str	r2, [r7, #20]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bbe:	2218      	movs	r2, #24
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	68b8      	ldr	r0, [r7, #8]
 8004bc4:	f7ff f910 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	4798      	blx	r3
  }
}
 8004bdc:	bf00      	nop
 8004bde:	3730      	adds	r7, #48	; 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200142ac 	.word	0x200142ac
 8004be8:	2001427c 	.word	0x2001427c

08004bec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b092      	sub	sp, #72	; 0x48
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf8:	f04f 0120 	mov.w	r1, #32
 8004bfc:	f381 8811 	msr	BASEPRI, r1
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	486a      	ldr	r0, [pc, #424]	; (8004dac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004c04:	f7ff f800 	bl	8003c08 <_PreparePacket>
 8004c08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	647b      	str	r3, [r7, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b66      	ldr	r3, [pc, #408]	; (8004db0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1e:	e00b      	b.n	8004c38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	6479      	str	r1, [r7, #68]	; 0x44
 8004c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c34:	09db      	lsrs	r3, r3, #7
 8004c36:	643b      	str	r3, [r7, #64]	; 0x40
 8004c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c3c:	d8f0      	bhi.n	8004c20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	647a      	str	r2, [r7, #68]	; 0x44
 8004c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c58:	e00b      	b.n	8004c72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c60:	1c59      	adds	r1, r3, #1
 8004c62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	09db      	lsrs	r3, r3, #7
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b7f      	cmp	r3, #127	; 0x7f
 8004c76:	d8f0      	bhi.n	8004c5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7fe ff69 	bl	8003b68 <_EncodeStr>
 8004c96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004c98:	2209      	movs	r2, #9
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	6938      	ldr	r0, [r7, #16]
 8004c9e:	f7ff f8a3 	bl	8003de8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	e00b      	b.n	8004cd0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	6379      	str	r1, [r7, #52]	; 0x34
 8004cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	637a      	str	r2, [r7, #52]	; 0x34
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf0:	e00b      	b.n	8004d0a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	09db      	lsrs	r3, r3, #7
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0e:	d8f0      	bhi.n	8004cf2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	e00b      	b.n	8004d44 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	6279      	str	r1, [r7, #36]	; 0x24
 8004d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	09db      	lsrs	r3, r3, #7
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	2b7f      	cmp	r3, #127	; 0x7f
 8004d48:	d8f0      	bhi.n	8004d2c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e00b      	b.n	8004d7c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	61f9      	str	r1, [r7, #28]
 8004d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	09db      	lsrs	r3, r3, #7
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d80:	d8f0      	bhi.n	8004d64 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	61fa      	str	r2, [r7, #28]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004d92:	2215      	movs	r2, #21
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	6938      	ldr	r0, [r7, #16]
 8004d98:	f7ff f826 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f383 8811 	msr	BASEPRI, r3
}
 8004da2:	bf00      	nop
 8004da4:	3748      	adds	r7, #72	; 0x48
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200142ac 	.word	0x200142ac
 8004db0:	2001427c 	.word	0x2001427c

08004db4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004dca:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4798      	blx	r3
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2001427c 	.word	0x2001427c

08004ddc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004de4:	f3ef 8311 	mrs	r3, BASEPRI
 8004de8:	f04f 0120 	mov.w	r1, #32
 8004dec:	f381 8811 	msr	BASEPRI, r1
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	480b      	ldr	r0, [pc, #44]	; (8004e20 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004df4:	f7fe ff08 	bl	8003c08 <_PreparePacket>
 8004df8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	6938      	ldr	r0, [r7, #16]
 8004e00:	f7fe feb2 	bl	8003b68 <_EncodeStr>
 8004e04:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e06:	220e      	movs	r2, #14
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f7fe ffec 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f383 8811 	msr	BASEPRI, r3
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	200142ac 	.word	0x200142ac

08004e24 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01a      	beq.n	8004e68 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4798      	blx	r3
 8004e44:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e48:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	000a      	movs	r2, r1
 8004e58:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4621      	mov	r1, r4
 8004e60:	200d      	movs	r0, #13
 8004e62:	f7ff fcef 	bl	8004844 <SEGGER_SYSVIEW_RecordU32x2>
 8004e66:	e006      	b.n	8004e76 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	200c      	movs	r0, #12
 8004e70:	f7ff fcac 	bl	80047cc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2001427c 	.word	0x2001427c
 8004e84:	e0001004 	.word	0xe0001004

08004e88 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e92:	f04f 0120 	mov.w	r1, #32
 8004e96:	f381 8811 	msr	BASEPRI, r1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	4819      	ldr	r0, [pc, #100]	; (8004f04 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004e9e:	f7fe feb3 	bl	8003c08 <_PreparePacket>
 8004ea2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e00b      	b.n	8004ed4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	6179      	str	r1, [r7, #20]
 8004ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	09db      	lsrs	r3, r3, #7
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed8:	d8f0      	bhi.n	8004ebc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	617a      	str	r2, [r7, #20]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004eea:	2202      	movs	r2, #2
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68b8      	ldr	r0, [r7, #8]
 8004ef0:	f7fe ff7a 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f383 8811 	msr	BASEPRI, r3
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200142ac 	.word	0x200142ac
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f12:	f3ef 8311 	mrs	r3, BASEPRI
 8004f16:	f04f 0120 	mov.w	r1, #32
 8004f1a:	f381 8811 	msr	BASEPRI, r1
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	4807      	ldr	r0, [pc, #28]	; (8004f40 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f22:	f7fe fe71 	bl	8003c08 <_PreparePacket>
 8004f26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f28:	2203      	movs	r2, #3
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f7fe ff5b 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f383 8811 	msr	BASEPRI, r3
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	200142ac 	.word	0x200142ac

08004f44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4e:	f04f 0120 	mov.w	r1, #32
 8004f52:	f381 8811 	msr	BASEPRI, r1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	4807      	ldr	r0, [pc, #28]	; (8004f78 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f5a:	f7fe fe55 	bl	8003c08 <_PreparePacket>
 8004f5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f60:	2212      	movs	r2, #18
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6838      	ldr	r0, [r7, #0]
 8004f66:	f7fe ff3f 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200142ac 	.word	0x200142ac

08004f7c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f82:	f3ef 8311 	mrs	r3, BASEPRI
 8004f86:	f04f 0120 	mov.w	r1, #32
 8004f8a:	f381 8811 	msr	BASEPRI, r1
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	4807      	ldr	r0, [pc, #28]	; (8004fb0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004f92:	f7fe fe39 	bl	8003c08 <_PreparePacket>
 8004f96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f98:	2211      	movs	r2, #17
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f7fe ff23 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f383 8811 	msr	BASEPRI, r3
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200142ac 	.word	0x200142ac

08004fb4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc0:	f04f 0120 	mov.w	r1, #32
 8004fc4:	f381 8811 	msr	BASEPRI, r1
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	4819      	ldr	r0, [pc, #100]	; (8005030 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004fcc:	f7fe fe1c 	bl	8003c08 <_PreparePacket>
 8004fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e00b      	b.n	8005002 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	61f9      	str	r1, [r7, #28]
 8004ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	09db      	lsrs	r3, r3, #7
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b7f      	cmp	r3, #127	; 0x7f
 8005006:	d8f0      	bhi.n	8004fea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005018:	2208      	movs	r2, #8
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	6938      	ldr	r0, [r7, #16]
 800501e:	f7fe fee3 	bl	8003de8 <_SendPacket>
  RECORD_END();
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f383 8811 	msr	BASEPRI, r3
}
 8005028:	bf00      	nop
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	200142ac 	.word	0x200142ac
 8005034:	2001427c 	.word	0x2001427c

08005038 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	f04f 0120 	mov.w	r1, #32
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	4819      	ldr	r0, [pc, #100]	; (80050b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005050:	f7fe fdda 	bl	8003c08 <_PreparePacket>
 8005054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800505a:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e00b      	b.n	8005086 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1c59      	adds	r1, r3, #1
 8005076:	61f9      	str	r1, [r7, #28]
 8005078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	09db      	lsrs	r3, r3, #7
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b7f      	cmp	r3, #127	; 0x7f
 800508a:	d8f0      	bhi.n	800506e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800509c:	2204      	movs	r2, #4
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6938      	ldr	r0, [r7, #16]
 80050a2:	f7fe fea1 	bl	8003de8 <_SendPacket>
  RECORD_END();
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f383 8811 	msr	BASEPRI, r3
}
 80050ac:	bf00      	nop
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200142ac 	.word	0x200142ac
 80050b8:	2001427c 	.word	0x2001427c

080050bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050c4:	f3ef 8311 	mrs	r3, BASEPRI
 80050c8:	f04f 0120 	mov.w	r1, #32
 80050cc:	f381 8811 	msr	BASEPRI, r1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	4819      	ldr	r0, [pc, #100]	; (8005138 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80050d4:	f7fe fd98 	bl	8003c08 <_PreparePacket>
 80050d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050de:	4b17      	ldr	r3, [pc, #92]	; (800513c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e00b      	b.n	800510a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	61f9      	str	r1, [r7, #28]
 80050fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	09db      	lsrs	r3, r3, #7
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b7f      	cmp	r3, #127	; 0x7f
 800510e:	d8f0      	bhi.n	80050f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	61fa      	str	r2, [r7, #28]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005120:	2206      	movs	r2, #6
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	6938      	ldr	r0, [r7, #16]
 8005126:	f7fe fe5f 	bl	8003de8 <_SendPacket>
  RECORD_END();
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f383 8811 	msr	BASEPRI, r3
}
 8005130:	bf00      	nop
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	200142ac 	.word	0x200142ac
 800513c:	2001427c 	.word	0x2001427c

08005140 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	; 0x30
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800514a:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06d      	beq.n	800522e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005152:	4b39      	ldr	r3, [pc, #228]	; (8005238 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005158:	2300      	movs	r3, #0
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
 800515c:	e008      	b.n	8005170 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	3301      	adds	r3, #1
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005174:	429a      	cmp	r2, r3
 8005176:	d3f2      	bcc.n	800515e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005178:	e000      	b.n	800517c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800517a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	2b00      	cmp	r3, #0
 8005180:	d055      	beq.n	800522e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	482a      	ldr	r0, [pc, #168]	; (800523c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005192:	f7fe fd39 	bl	8003c08 <_PreparePacket>
 8005196:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_SendModule+0x7e>
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	6279      	str	r1, [r7, #36]	; 0x24
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	627a      	str	r2, [r7, #36]	; 0x24
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e00b      	b.n	80051f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	61f9      	str	r1, [r7, #28]
 80051ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b7f      	cmp	r3, #127	; 0x7f
 80051fc:	d8f0      	bhi.n	80051e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	61fa      	str	r2, [r7, #28]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2280      	movs	r2, #128	; 0x80
 8005214:	4619      	mov	r1, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7fe fca6 	bl	8003b68 <_EncodeStr>
 800521c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800521e:	2216      	movs	r2, #22
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	6938      	ldr	r0, [r7, #16]
 8005224:	f7fe fde0 	bl	8003de8 <_SendPacket>
      RECORD_END();
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800522e:	bf00      	nop
 8005230:	3730      	adds	r7, #48	; 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200142a4 	.word	0x200142a4
 800523c:	200142ac 	.word	0x200142ac

08005240 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f2      	bne.n	8005254 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200142a4 	.word	0x200142a4

0800527c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005282:	f3ef 8311 	mrs	r3, BASEPRI
 8005286:	f04f 0120 	mov.w	r1, #32
 800528a:	f381 8811 	msr	BASEPRI, r1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	4817      	ldr	r0, [pc, #92]	; (80052f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005292:	f7fe fcb9 	bl	8003c08 <_PreparePacket>
 8005296:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	6179      	str	r1, [r7, #20]
 80052b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	617a      	str	r2, [r7, #20]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80052d6:	221b      	movs	r2, #27
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68b8      	ldr	r0, [r7, #8]
 80052dc:	f7fe fd84 	bl	8003de8 <_SendPacket>
  RECORD_END();
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f383 8811 	msr	BASEPRI, r3
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200142ac 	.word	0x200142ac
 80052f4:	200142a8 	.word	0x200142a8

080052f8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80052f8:	b40f      	push	{r0, r1, r2, r3}
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	461a      	mov	r2, r3
 800530a:	2100      	movs	r1, #0
 800530c:	6938      	ldr	r0, [r7, #16]
 800530e:	f7fe fff3 	bl	80042f8 <_VPrintTarget>
  va_end(ParamList);
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800531c:	b004      	add	sp, #16
 800531e:	4770      	bx	lr

08005320 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005328:	f3ef 8311 	mrs	r3, BASEPRI
 800532c:	f04f 0120 	mov.w	r1, #32
 8005330:	f381 8811 	msr	BASEPRI, r1
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	4827      	ldr	r0, [pc, #156]	; (80053d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005338:	f7fe fc66 	bl	8003c08 <_PreparePacket>
 800533c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6938      	ldr	r0, [r7, #16]
 8005344:	f7fe fc10 	bl	8003b68 <_EncodeStr>
 8005348:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	2301      	movs	r3, #1
 8005350:	623b      	str	r3, [r7, #32]
 8005352:	e00b      	b.n	800536c <SEGGER_SYSVIEW_Warn+0x4c>
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	6279      	str	r1, [r7, #36]	; 0x24
 800535e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	09db      	lsrs	r3, r3, #7
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2b7f      	cmp	r3, #127	; 0x7f
 8005370:	d8f0      	bhi.n	8005354 <SEGGER_SYSVIEW_Warn+0x34>
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	627a      	str	r2, [r7, #36]	; 0x24
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	2300      	movs	r3, #0
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e00b      	b.n	80053a4 <SEGGER_SYSVIEW_Warn+0x84>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	61f9      	str	r1, [r7, #28]
 8005396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	d8f0      	bhi.n	800538c <SEGGER_SYSVIEW_Warn+0x6c>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	61fa      	str	r2, [r7, #28]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80053ba:	221a      	movs	r2, #26
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	6938      	ldr	r0, [r7, #16]
 80053c0:	f7fe fd12 	bl	8003de8 <_SendPacket>
  RECORD_END();
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f383 8811 	msr	BASEPRI, r3
}
 80053ca:	bf00      	nop
 80053cc:	3728      	adds	r7, #40	; 0x28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200142ac 	.word	0x200142ac

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	; (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	; (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	; (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	; (800541c <__libc_init_array+0x44>)
 80053ec:	f000 fc7e 	bl	8005cec <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	08005e98 	.word	0x08005e98
 8005414:	08005e98 	.word	0x08005e98
 8005418:	08005e98 	.word	0x08005e98
 800541c:	08005e9c 	.word	0x08005e9c

08005420 <memcmp>:
 8005420:	b530      	push	{r4, r5, lr}
 8005422:	3901      	subs	r1, #1
 8005424:	2400      	movs	r4, #0
 8005426:	42a2      	cmp	r2, r4
 8005428:	d101      	bne.n	800542e <memcmp+0xe>
 800542a:	2000      	movs	r0, #0
 800542c:	e005      	b.n	800543a <memcmp+0x1a>
 800542e:	5d03      	ldrb	r3, [r0, r4]
 8005430:	3401      	adds	r4, #1
 8005432:	5d0d      	ldrb	r5, [r1, r4]
 8005434:	42ab      	cmp	r3, r5
 8005436:	d0f6      	beq.n	8005426 <memcmp+0x6>
 8005438:	1b58      	subs	r0, r3, r5
 800543a:	bd30      	pop	{r4, r5, pc}

0800543c <memcpy>:
 800543c:	440a      	add	r2, r1
 800543e:	4291      	cmp	r1, r2
 8005440:	f100 33ff 	add.w	r3, r0, #4294967295
 8005444:	d100      	bne.n	8005448 <memcpy+0xc>
 8005446:	4770      	bx	lr
 8005448:	b510      	push	{r4, lr}
 800544a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800544e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005452:	4291      	cmp	r1, r2
 8005454:	d1f9      	bne.n	800544a <memcpy+0xe>
 8005456:	bd10      	pop	{r4, pc}

08005458 <memset>:
 8005458:	4402      	add	r2, r0
 800545a:	4603      	mov	r3, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	d100      	bne.n	8005462 <memset+0xa>
 8005460:	4770      	bx	lr
 8005462:	f803 1b01 	strb.w	r1, [r3], #1
 8005466:	e7f9      	b.n	800545c <memset+0x4>

08005468 <sniprintf>:
 8005468:	b40c      	push	{r2, r3}
 800546a:	b530      	push	{r4, r5, lr}
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <sniprintf+0x64>)
 800546e:	1e0c      	subs	r4, r1, #0
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	b09d      	sub	sp, #116	; 0x74
 8005474:	da08      	bge.n	8005488 <sniprintf+0x20>
 8005476:	238b      	movs	r3, #139	; 0x8b
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	b01d      	add	sp, #116	; 0x74
 8005480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005484:	b002      	add	sp, #8
 8005486:	4770      	bx	lr
 8005488:	f44f 7302 	mov.w	r3, #520	; 0x208
 800548c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005490:	bf14      	ite	ne
 8005492:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005496:	4623      	moveq	r3, r4
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a0:	9002      	str	r0, [sp, #8]
 80054a2:	9006      	str	r0, [sp, #24]
 80054a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054aa:	ab21      	add	r3, sp, #132	; 0x84
 80054ac:	a902      	add	r1, sp, #8
 80054ae:	4628      	mov	r0, r5
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	f000 f869 	bl	8005588 <_svfiprintf_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	bfbc      	itt	lt
 80054ba:	238b      	movlt	r3, #139	; 0x8b
 80054bc:	602b      	strlt	r3, [r5, #0]
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d0dd      	beq.n	800547e <sniprintf+0x16>
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e7d9      	b.n	800547e <sniprintf+0x16>
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014

080054d0 <__ssputs_r>:
 80054d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d4:	688e      	ldr	r6, [r1, #8]
 80054d6:	429e      	cmp	r6, r3
 80054d8:	4682      	mov	sl, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	4690      	mov	r8, r2
 80054de:	461f      	mov	r7, r3
 80054e0:	d838      	bhi.n	8005554 <__ssputs_r+0x84>
 80054e2:	898a      	ldrh	r2, [r1, #12]
 80054e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054e8:	d032      	beq.n	8005550 <__ssputs_r+0x80>
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	6909      	ldr	r1, [r1, #16]
 80054ee:	eba5 0901 	sub.w	r9, r5, r1
 80054f2:	6965      	ldr	r5, [r4, #20]
 80054f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054fc:	3301      	adds	r3, #1
 80054fe:	444b      	add	r3, r9
 8005500:	106d      	asrs	r5, r5, #1
 8005502:	429d      	cmp	r5, r3
 8005504:	bf38      	it	cc
 8005506:	461d      	movcc	r5, r3
 8005508:	0553      	lsls	r3, r2, #21
 800550a:	d531      	bpl.n	8005570 <__ssputs_r+0xa0>
 800550c:	4629      	mov	r1, r5
 800550e:	f000 fb39 	bl	8005b84 <_malloc_r>
 8005512:	4606      	mov	r6, r0
 8005514:	b950      	cbnz	r0, 800552c <__ssputs_r+0x5c>
 8005516:	230c      	movs	r3, #12
 8005518:	f8ca 3000 	str.w	r3, [sl]
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005522:	81a3      	strh	r3, [r4, #12]
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	6921      	ldr	r1, [r4, #16]
 800552e:	464a      	mov	r2, r9
 8005530:	f7ff ff84 	bl	800543c <memcpy>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	6126      	str	r6, [r4, #16]
 8005542:	6165      	str	r5, [r4, #20]
 8005544:	444e      	add	r6, r9
 8005546:	eba5 0509 	sub.w	r5, r5, r9
 800554a:	6026      	str	r6, [r4, #0]
 800554c:	60a5      	str	r5, [r4, #8]
 800554e:	463e      	mov	r6, r7
 8005550:	42be      	cmp	r6, r7
 8005552:	d900      	bls.n	8005556 <__ssputs_r+0x86>
 8005554:	463e      	mov	r6, r7
 8005556:	4632      	mov	r2, r6
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	4641      	mov	r1, r8
 800555c:	f000 faa8 	bl	8005ab0 <memmove>
 8005560:	68a3      	ldr	r3, [r4, #8]
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	1b9b      	subs	r3, r3, r6
 8005566:	4432      	add	r2, r6
 8005568:	60a3      	str	r3, [r4, #8]
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	2000      	movs	r0, #0
 800556e:	e7db      	b.n	8005528 <__ssputs_r+0x58>
 8005570:	462a      	mov	r2, r5
 8005572:	f000 fb61 	bl	8005c38 <_realloc_r>
 8005576:	4606      	mov	r6, r0
 8005578:	2800      	cmp	r0, #0
 800557a:	d1e1      	bne.n	8005540 <__ssputs_r+0x70>
 800557c:	6921      	ldr	r1, [r4, #16]
 800557e:	4650      	mov	r0, sl
 8005580:	f000 fab0 	bl	8005ae4 <_free_r>
 8005584:	e7c7      	b.n	8005516 <__ssputs_r+0x46>
	...

08005588 <_svfiprintf_r>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	4698      	mov	r8, r3
 800558e:	898b      	ldrh	r3, [r1, #12]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	b09d      	sub	sp, #116	; 0x74
 8005594:	4607      	mov	r7, r0
 8005596:	460d      	mov	r5, r1
 8005598:	4614      	mov	r4, r2
 800559a:	d50e      	bpl.n	80055ba <_svfiprintf_r+0x32>
 800559c:	690b      	ldr	r3, [r1, #16]
 800559e:	b963      	cbnz	r3, 80055ba <_svfiprintf_r+0x32>
 80055a0:	2140      	movs	r1, #64	; 0x40
 80055a2:	f000 faef 	bl	8005b84 <_malloc_r>
 80055a6:	6028      	str	r0, [r5, #0]
 80055a8:	6128      	str	r0, [r5, #16]
 80055aa:	b920      	cbnz	r0, 80055b6 <_svfiprintf_r+0x2e>
 80055ac:	230c      	movs	r3, #12
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	e0d1      	b.n	800575a <_svfiprintf_r+0x1d2>
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	616b      	str	r3, [r5, #20]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9309      	str	r3, [sp, #36]	; 0x24
 80055be:	2320      	movs	r3, #32
 80055c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c8:	2330      	movs	r3, #48	; 0x30
 80055ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005774 <_svfiprintf_r+0x1ec>
 80055ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d2:	f04f 0901 	mov.w	r9, #1
 80055d6:	4623      	mov	r3, r4
 80055d8:	469a      	mov	sl, r3
 80055da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055de:	b10a      	cbz	r2, 80055e4 <_svfiprintf_r+0x5c>
 80055e0:	2a25      	cmp	r2, #37	; 0x25
 80055e2:	d1f9      	bne.n	80055d8 <_svfiprintf_r+0x50>
 80055e4:	ebba 0b04 	subs.w	fp, sl, r4
 80055e8:	d00b      	beq.n	8005602 <_svfiprintf_r+0x7a>
 80055ea:	465b      	mov	r3, fp
 80055ec:	4622      	mov	r2, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff ff6d 	bl	80054d0 <__ssputs_r>
 80055f6:	3001      	adds	r0, #1
 80055f8:	f000 80aa 	beq.w	8005750 <_svfiprintf_r+0x1c8>
 80055fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fe:	445a      	add	r2, fp
 8005600:	9209      	str	r2, [sp, #36]	; 0x24
 8005602:	f89a 3000 	ldrb.w	r3, [sl]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80a2 	beq.w	8005750 <_svfiprintf_r+0x1c8>
 800560c:	2300      	movs	r3, #0
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005616:	f10a 0a01 	add.w	sl, sl, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005622:	931a      	str	r3, [sp, #104]	; 0x68
 8005624:	4654      	mov	r4, sl
 8005626:	2205      	movs	r2, #5
 8005628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562c:	4851      	ldr	r0, [pc, #324]	; (8005774 <_svfiprintf_r+0x1ec>)
 800562e:	f7fa fe3f 	bl	80002b0 <memchr>
 8005632:	9a04      	ldr	r2, [sp, #16]
 8005634:	b9d8      	cbnz	r0, 800566e <_svfiprintf_r+0xe6>
 8005636:	06d0      	lsls	r0, r2, #27
 8005638:	bf44      	itt	mi
 800563a:	2320      	movmi	r3, #32
 800563c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005640:	0711      	lsls	r1, r2, #28
 8005642:	bf44      	itt	mi
 8005644:	232b      	movmi	r3, #43	; 0x2b
 8005646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564a:	f89a 3000 	ldrb.w	r3, [sl]
 800564e:	2b2a      	cmp	r3, #42	; 0x2a
 8005650:	d015      	beq.n	800567e <_svfiprintf_r+0xf6>
 8005652:	9a07      	ldr	r2, [sp, #28]
 8005654:	4654      	mov	r4, sl
 8005656:	2000      	movs	r0, #0
 8005658:	f04f 0c0a 	mov.w	ip, #10
 800565c:	4621      	mov	r1, r4
 800565e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005662:	3b30      	subs	r3, #48	; 0x30
 8005664:	2b09      	cmp	r3, #9
 8005666:	d94e      	bls.n	8005706 <_svfiprintf_r+0x17e>
 8005668:	b1b0      	cbz	r0, 8005698 <_svfiprintf_r+0x110>
 800566a:	9207      	str	r2, [sp, #28]
 800566c:	e014      	b.n	8005698 <_svfiprintf_r+0x110>
 800566e:	eba0 0308 	sub.w	r3, r0, r8
 8005672:	fa09 f303 	lsl.w	r3, r9, r3
 8005676:	4313      	orrs	r3, r2
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	46a2      	mov	sl, r4
 800567c:	e7d2      	b.n	8005624 <_svfiprintf_r+0x9c>
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	9103      	str	r1, [sp, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfbb      	ittet	lt
 800568a:	425b      	neglt	r3, r3
 800568c:	f042 0202 	orrlt.w	r2, r2, #2
 8005690:	9307      	strge	r3, [sp, #28]
 8005692:	9307      	strlt	r3, [sp, #28]
 8005694:	bfb8      	it	lt
 8005696:	9204      	strlt	r2, [sp, #16]
 8005698:	7823      	ldrb	r3, [r4, #0]
 800569a:	2b2e      	cmp	r3, #46	; 0x2e
 800569c:	d10c      	bne.n	80056b8 <_svfiprintf_r+0x130>
 800569e:	7863      	ldrb	r3, [r4, #1]
 80056a0:	2b2a      	cmp	r3, #42	; 0x2a
 80056a2:	d135      	bne.n	8005710 <_svfiprintf_r+0x188>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	1d1a      	adds	r2, r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	9203      	str	r2, [sp, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfb8      	it	lt
 80056b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b4:	3402      	adds	r4, #2
 80056b6:	9305      	str	r3, [sp, #20]
 80056b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005784 <_svfiprintf_r+0x1fc>
 80056bc:	7821      	ldrb	r1, [r4, #0]
 80056be:	2203      	movs	r2, #3
 80056c0:	4650      	mov	r0, sl
 80056c2:	f7fa fdf5 	bl	80002b0 <memchr>
 80056c6:	b140      	cbz	r0, 80056da <_svfiprintf_r+0x152>
 80056c8:	2340      	movs	r3, #64	; 0x40
 80056ca:	eba0 000a 	sub.w	r0, r0, sl
 80056ce:	fa03 f000 	lsl.w	r0, r3, r0
 80056d2:	9b04      	ldr	r3, [sp, #16]
 80056d4:	4303      	orrs	r3, r0
 80056d6:	3401      	adds	r4, #1
 80056d8:	9304      	str	r3, [sp, #16]
 80056da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056de:	4826      	ldr	r0, [pc, #152]	; (8005778 <_svfiprintf_r+0x1f0>)
 80056e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e4:	2206      	movs	r2, #6
 80056e6:	f7fa fde3 	bl	80002b0 <memchr>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d038      	beq.n	8005760 <_svfiprintf_r+0x1d8>
 80056ee:	4b23      	ldr	r3, [pc, #140]	; (800577c <_svfiprintf_r+0x1f4>)
 80056f0:	bb1b      	cbnz	r3, 800573a <_svfiprintf_r+0x1b2>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	3307      	adds	r3, #7
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	3308      	adds	r3, #8
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	4433      	add	r3, r6
 8005702:	9309      	str	r3, [sp, #36]	; 0x24
 8005704:	e767      	b.n	80055d6 <_svfiprintf_r+0x4e>
 8005706:	fb0c 3202 	mla	r2, ip, r2, r3
 800570a:	460c      	mov	r4, r1
 800570c:	2001      	movs	r0, #1
 800570e:	e7a5      	b.n	800565c <_svfiprintf_r+0xd4>
 8005710:	2300      	movs	r3, #0
 8005712:	3401      	adds	r4, #1
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 0c0a 	mov.w	ip, #10
 800571c:	4620      	mov	r0, r4
 800571e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005722:	3a30      	subs	r2, #48	; 0x30
 8005724:	2a09      	cmp	r2, #9
 8005726:	d903      	bls.n	8005730 <_svfiprintf_r+0x1a8>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c5      	beq.n	80056b8 <_svfiprintf_r+0x130>
 800572c:	9105      	str	r1, [sp, #20]
 800572e:	e7c3      	b.n	80056b8 <_svfiprintf_r+0x130>
 8005730:	fb0c 2101 	mla	r1, ip, r1, r2
 8005734:	4604      	mov	r4, r0
 8005736:	2301      	movs	r3, #1
 8005738:	e7f0      	b.n	800571c <_svfiprintf_r+0x194>
 800573a:	ab03      	add	r3, sp, #12
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	462a      	mov	r2, r5
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <_svfiprintf_r+0x1f8>)
 8005742:	a904      	add	r1, sp, #16
 8005744:	4638      	mov	r0, r7
 8005746:	f3af 8000 	nop.w
 800574a:	1c42      	adds	r2, r0, #1
 800574c:	4606      	mov	r6, r0
 800574e:	d1d6      	bne.n	80056fe <_svfiprintf_r+0x176>
 8005750:	89ab      	ldrh	r3, [r5, #12]
 8005752:	065b      	lsls	r3, r3, #25
 8005754:	f53f af2c 	bmi.w	80055b0 <_svfiprintf_r+0x28>
 8005758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800575a:	b01d      	add	sp, #116	; 0x74
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	ab03      	add	r3, sp, #12
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	462a      	mov	r2, r5
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <_svfiprintf_r+0x1f8>)
 8005768:	a904      	add	r1, sp, #16
 800576a:	4638      	mov	r0, r7
 800576c:	f000 f87a 	bl	8005864 <_printf_i>
 8005770:	e7eb      	b.n	800574a <_svfiprintf_r+0x1c2>
 8005772:	bf00      	nop
 8005774:	08005e5c 	.word	0x08005e5c
 8005778:	08005e66 	.word	0x08005e66
 800577c:	00000000 	.word	0x00000000
 8005780:	080054d1 	.word	0x080054d1
 8005784:	08005e62 	.word	0x08005e62

08005788 <_printf_common>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	4616      	mov	r6, r2
 800578e:	4699      	mov	r9, r3
 8005790:	688a      	ldr	r2, [r1, #8]
 8005792:	690b      	ldr	r3, [r1, #16]
 8005794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005798:	4293      	cmp	r3, r2
 800579a:	bfb8      	it	lt
 800579c:	4613      	movlt	r3, r2
 800579e:	6033      	str	r3, [r6, #0]
 80057a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a4:	4607      	mov	r7, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	b10a      	cbz	r2, 80057ae <_printf_common+0x26>
 80057aa:	3301      	adds	r3, #1
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	0699      	lsls	r1, r3, #26
 80057b2:	bf42      	ittt	mi
 80057b4:	6833      	ldrmi	r3, [r6, #0]
 80057b6:	3302      	addmi	r3, #2
 80057b8:	6033      	strmi	r3, [r6, #0]
 80057ba:	6825      	ldr	r5, [r4, #0]
 80057bc:	f015 0506 	ands.w	r5, r5, #6
 80057c0:	d106      	bne.n	80057d0 <_printf_common+0x48>
 80057c2:	f104 0a19 	add.w	sl, r4, #25
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	6832      	ldr	r2, [r6, #0]
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dc26      	bgt.n	800581e <_printf_common+0x96>
 80057d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d4:	1e13      	subs	r3, r2, #0
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	bf18      	it	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	0692      	lsls	r2, r2, #26
 80057de:	d42b      	bmi.n	8005838 <_printf_common+0xb0>
 80057e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d01e      	beq.n	800582c <_printf_common+0xa4>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	68e5      	ldr	r5, [r4, #12]
 80057f2:	6832      	ldr	r2, [r6, #0]
 80057f4:	f003 0306 	and.w	r3, r3, #6
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	bf08      	it	eq
 80057fc:	1aad      	subeq	r5, r5, r2
 80057fe:	68a3      	ldr	r3, [r4, #8]
 8005800:	6922      	ldr	r2, [r4, #16]
 8005802:	bf0c      	ite	eq
 8005804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005808:	2500      	movne	r5, #0
 800580a:	4293      	cmp	r3, r2
 800580c:	bfc4      	itt	gt
 800580e:	1a9b      	subgt	r3, r3, r2
 8005810:	18ed      	addgt	r5, r5, r3
 8005812:	2600      	movs	r6, #0
 8005814:	341a      	adds	r4, #26
 8005816:	42b5      	cmp	r5, r6
 8005818:	d11a      	bne.n	8005850 <_printf_common+0xc8>
 800581a:	2000      	movs	r0, #0
 800581c:	e008      	b.n	8005830 <_printf_common+0xa8>
 800581e:	2301      	movs	r3, #1
 8005820:	4652      	mov	r2, sl
 8005822:	4649      	mov	r1, r9
 8005824:	4638      	mov	r0, r7
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d103      	bne.n	8005834 <_printf_common+0xac>
 800582c:	f04f 30ff 	mov.w	r0, #4294967295
 8005830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005834:	3501      	adds	r5, #1
 8005836:	e7c6      	b.n	80057c6 <_printf_common+0x3e>
 8005838:	18e1      	adds	r1, r4, r3
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	2030      	movs	r0, #48	; 0x30
 800583e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005842:	4422      	add	r2, r4
 8005844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800584c:	3302      	adds	r3, #2
 800584e:	e7c7      	b.n	80057e0 <_printf_common+0x58>
 8005850:	2301      	movs	r3, #1
 8005852:	4622      	mov	r2, r4
 8005854:	4649      	mov	r1, r9
 8005856:	4638      	mov	r0, r7
 8005858:	47c0      	blx	r8
 800585a:	3001      	adds	r0, #1
 800585c:	d0e6      	beq.n	800582c <_printf_common+0xa4>
 800585e:	3601      	adds	r6, #1
 8005860:	e7d9      	b.n	8005816 <_printf_common+0x8e>
	...

08005864 <_printf_i>:
 8005864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	460c      	mov	r4, r1
 800586a:	4691      	mov	r9, r2
 800586c:	7e27      	ldrb	r7, [r4, #24]
 800586e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005870:	2f78      	cmp	r7, #120	; 0x78
 8005872:	4680      	mov	r8, r0
 8005874:	469a      	mov	sl, r3
 8005876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587a:	d807      	bhi.n	800588c <_printf_i+0x28>
 800587c:	2f62      	cmp	r7, #98	; 0x62
 800587e:	d80a      	bhi.n	8005896 <_printf_i+0x32>
 8005880:	2f00      	cmp	r7, #0
 8005882:	f000 80d8 	beq.w	8005a36 <_printf_i+0x1d2>
 8005886:	2f58      	cmp	r7, #88	; 0x58
 8005888:	f000 80a3 	beq.w	80059d2 <_printf_i+0x16e>
 800588c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005894:	e03a      	b.n	800590c <_printf_i+0xa8>
 8005896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800589a:	2b15      	cmp	r3, #21
 800589c:	d8f6      	bhi.n	800588c <_printf_i+0x28>
 800589e:	a001      	add	r0, pc, #4	; (adr r0, 80058a4 <_printf_i+0x40>)
 80058a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058a4:	080058fd 	.word	0x080058fd
 80058a8:	08005911 	.word	0x08005911
 80058ac:	0800588d 	.word	0x0800588d
 80058b0:	0800588d 	.word	0x0800588d
 80058b4:	0800588d 	.word	0x0800588d
 80058b8:	0800588d 	.word	0x0800588d
 80058bc:	08005911 	.word	0x08005911
 80058c0:	0800588d 	.word	0x0800588d
 80058c4:	0800588d 	.word	0x0800588d
 80058c8:	0800588d 	.word	0x0800588d
 80058cc:	0800588d 	.word	0x0800588d
 80058d0:	08005a1d 	.word	0x08005a1d
 80058d4:	08005941 	.word	0x08005941
 80058d8:	080059ff 	.word	0x080059ff
 80058dc:	0800588d 	.word	0x0800588d
 80058e0:	0800588d 	.word	0x0800588d
 80058e4:	08005a3f 	.word	0x08005a3f
 80058e8:	0800588d 	.word	0x0800588d
 80058ec:	08005941 	.word	0x08005941
 80058f0:	0800588d 	.word	0x0800588d
 80058f4:	0800588d 	.word	0x0800588d
 80058f8:	08005a07 	.word	0x08005a07
 80058fc:	680b      	ldr	r3, [r1, #0]
 80058fe:	1d1a      	adds	r2, r3, #4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	600a      	str	r2, [r1, #0]
 8005904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800590c:	2301      	movs	r3, #1
 800590e:	e0a3      	b.n	8005a58 <_printf_i+0x1f4>
 8005910:	6825      	ldr	r5, [r4, #0]
 8005912:	6808      	ldr	r0, [r1, #0]
 8005914:	062e      	lsls	r6, r5, #24
 8005916:	f100 0304 	add.w	r3, r0, #4
 800591a:	d50a      	bpl.n	8005932 <_printf_i+0xce>
 800591c:	6805      	ldr	r5, [r0, #0]
 800591e:	600b      	str	r3, [r1, #0]
 8005920:	2d00      	cmp	r5, #0
 8005922:	da03      	bge.n	800592c <_printf_i+0xc8>
 8005924:	232d      	movs	r3, #45	; 0x2d
 8005926:	426d      	negs	r5, r5
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592c:	485e      	ldr	r0, [pc, #376]	; (8005aa8 <_printf_i+0x244>)
 800592e:	230a      	movs	r3, #10
 8005930:	e019      	b.n	8005966 <_printf_i+0x102>
 8005932:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005936:	6805      	ldr	r5, [r0, #0]
 8005938:	600b      	str	r3, [r1, #0]
 800593a:	bf18      	it	ne
 800593c:	b22d      	sxthne	r5, r5
 800593e:	e7ef      	b.n	8005920 <_printf_i+0xbc>
 8005940:	680b      	ldr	r3, [r1, #0]
 8005942:	6825      	ldr	r5, [r4, #0]
 8005944:	1d18      	adds	r0, r3, #4
 8005946:	6008      	str	r0, [r1, #0]
 8005948:	0628      	lsls	r0, r5, #24
 800594a:	d501      	bpl.n	8005950 <_printf_i+0xec>
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	e002      	b.n	8005956 <_printf_i+0xf2>
 8005950:	0669      	lsls	r1, r5, #25
 8005952:	d5fb      	bpl.n	800594c <_printf_i+0xe8>
 8005954:	881d      	ldrh	r5, [r3, #0]
 8005956:	4854      	ldr	r0, [pc, #336]	; (8005aa8 <_printf_i+0x244>)
 8005958:	2f6f      	cmp	r7, #111	; 0x6f
 800595a:	bf0c      	ite	eq
 800595c:	2308      	moveq	r3, #8
 800595e:	230a      	movne	r3, #10
 8005960:	2100      	movs	r1, #0
 8005962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005966:	6866      	ldr	r6, [r4, #4]
 8005968:	60a6      	str	r6, [r4, #8]
 800596a:	2e00      	cmp	r6, #0
 800596c:	bfa2      	ittt	ge
 800596e:	6821      	ldrge	r1, [r4, #0]
 8005970:	f021 0104 	bicge.w	r1, r1, #4
 8005974:	6021      	strge	r1, [r4, #0]
 8005976:	b90d      	cbnz	r5, 800597c <_printf_i+0x118>
 8005978:	2e00      	cmp	r6, #0
 800597a:	d04d      	beq.n	8005a18 <_printf_i+0x1b4>
 800597c:	4616      	mov	r6, r2
 800597e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005982:	fb03 5711 	mls	r7, r3, r1, r5
 8005986:	5dc7      	ldrb	r7, [r0, r7]
 8005988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800598c:	462f      	mov	r7, r5
 800598e:	42bb      	cmp	r3, r7
 8005990:	460d      	mov	r5, r1
 8005992:	d9f4      	bls.n	800597e <_printf_i+0x11a>
 8005994:	2b08      	cmp	r3, #8
 8005996:	d10b      	bne.n	80059b0 <_printf_i+0x14c>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07df      	lsls	r7, r3, #31
 800599c:	d508      	bpl.n	80059b0 <_printf_i+0x14c>
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	6861      	ldr	r1, [r4, #4]
 80059a2:	4299      	cmp	r1, r3
 80059a4:	bfde      	ittt	le
 80059a6:	2330      	movle	r3, #48	; 0x30
 80059a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059b0:	1b92      	subs	r2, r2, r6
 80059b2:	6122      	str	r2, [r4, #16]
 80059b4:	f8cd a000 	str.w	sl, [sp]
 80059b8:	464b      	mov	r3, r9
 80059ba:	aa03      	add	r2, sp, #12
 80059bc:	4621      	mov	r1, r4
 80059be:	4640      	mov	r0, r8
 80059c0:	f7ff fee2 	bl	8005788 <_printf_common>
 80059c4:	3001      	adds	r0, #1
 80059c6:	d14c      	bne.n	8005a62 <_printf_i+0x1fe>
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	b004      	add	sp, #16
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d2:	4835      	ldr	r0, [pc, #212]	; (8005aa8 <_printf_i+0x244>)
 80059d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	680e      	ldr	r6, [r1, #0]
 80059dc:	061f      	lsls	r7, r3, #24
 80059de:	f856 5b04 	ldr.w	r5, [r6], #4
 80059e2:	600e      	str	r6, [r1, #0]
 80059e4:	d514      	bpl.n	8005a10 <_printf_i+0x1ac>
 80059e6:	07d9      	lsls	r1, r3, #31
 80059e8:	bf44      	itt	mi
 80059ea:	f043 0320 	orrmi.w	r3, r3, #32
 80059ee:	6023      	strmi	r3, [r4, #0]
 80059f0:	b91d      	cbnz	r5, 80059fa <_printf_i+0x196>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	f023 0320 	bic.w	r3, r3, #32
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	2310      	movs	r3, #16
 80059fc:	e7b0      	b.n	8005960 <_printf_i+0xfc>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	f043 0320 	orr.w	r3, r3, #32
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	2378      	movs	r3, #120	; 0x78
 8005a08:	4828      	ldr	r0, [pc, #160]	; (8005aac <_printf_i+0x248>)
 8005a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a0e:	e7e3      	b.n	80059d8 <_printf_i+0x174>
 8005a10:	065e      	lsls	r6, r3, #25
 8005a12:	bf48      	it	mi
 8005a14:	b2ad      	uxthmi	r5, r5
 8005a16:	e7e6      	b.n	80059e6 <_printf_i+0x182>
 8005a18:	4616      	mov	r6, r2
 8005a1a:	e7bb      	b.n	8005994 <_printf_i+0x130>
 8005a1c:	680b      	ldr	r3, [r1, #0]
 8005a1e:	6826      	ldr	r6, [r4, #0]
 8005a20:	6960      	ldr	r0, [r4, #20]
 8005a22:	1d1d      	adds	r5, r3, #4
 8005a24:	600d      	str	r5, [r1, #0]
 8005a26:	0635      	lsls	r5, r6, #24
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	d501      	bpl.n	8005a30 <_printf_i+0x1cc>
 8005a2c:	6018      	str	r0, [r3, #0]
 8005a2e:	e002      	b.n	8005a36 <_printf_i+0x1d2>
 8005a30:	0671      	lsls	r1, r6, #25
 8005a32:	d5fb      	bpl.n	8005a2c <_printf_i+0x1c8>
 8005a34:	8018      	strh	r0, [r3, #0]
 8005a36:	2300      	movs	r3, #0
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	4616      	mov	r6, r2
 8005a3c:	e7ba      	b.n	80059b4 <_printf_i+0x150>
 8005a3e:	680b      	ldr	r3, [r1, #0]
 8005a40:	1d1a      	adds	r2, r3, #4
 8005a42:	600a      	str	r2, [r1, #0]
 8005a44:	681e      	ldr	r6, [r3, #0]
 8005a46:	6862      	ldr	r2, [r4, #4]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7fa fc30 	bl	80002b0 <memchr>
 8005a50:	b108      	cbz	r0, 8005a56 <_printf_i+0x1f2>
 8005a52:	1b80      	subs	r0, r0, r6
 8005a54:	6060      	str	r0, [r4, #4]
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	6123      	str	r3, [r4, #16]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a60:	e7a8      	b.n	80059b4 <_printf_i+0x150>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	4632      	mov	r2, r6
 8005a66:	4649      	mov	r1, r9
 8005a68:	4640      	mov	r0, r8
 8005a6a:	47d0      	blx	sl
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d0ab      	beq.n	80059c8 <_printf_i+0x164>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	079b      	lsls	r3, r3, #30
 8005a74:	d413      	bmi.n	8005a9e <_printf_i+0x23a>
 8005a76:	68e0      	ldr	r0, [r4, #12]
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	4298      	cmp	r0, r3
 8005a7c:	bfb8      	it	lt
 8005a7e:	4618      	movlt	r0, r3
 8005a80:	e7a4      	b.n	80059cc <_printf_i+0x168>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4632      	mov	r2, r6
 8005a86:	4649      	mov	r1, r9
 8005a88:	4640      	mov	r0, r8
 8005a8a:	47d0      	blx	sl
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d09b      	beq.n	80059c8 <_printf_i+0x164>
 8005a90:	3501      	adds	r5, #1
 8005a92:	68e3      	ldr	r3, [r4, #12]
 8005a94:	9903      	ldr	r1, [sp, #12]
 8005a96:	1a5b      	subs	r3, r3, r1
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	dcf2      	bgt.n	8005a82 <_printf_i+0x21e>
 8005a9c:	e7eb      	b.n	8005a76 <_printf_i+0x212>
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	f104 0619 	add.w	r6, r4, #25
 8005aa4:	e7f5      	b.n	8005a92 <_printf_i+0x22e>
 8005aa6:	bf00      	nop
 8005aa8:	08005e6d 	.word	0x08005e6d
 8005aac:	08005e7e 	.word	0x08005e7e

08005ab0 <memmove>:
 8005ab0:	4288      	cmp	r0, r1
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	eb01 0402 	add.w	r4, r1, r2
 8005ab8:	d902      	bls.n	8005ac0 <memmove+0x10>
 8005aba:	4284      	cmp	r4, r0
 8005abc:	4623      	mov	r3, r4
 8005abe:	d807      	bhi.n	8005ad0 <memmove+0x20>
 8005ac0:	1e43      	subs	r3, r0, #1
 8005ac2:	42a1      	cmp	r1, r4
 8005ac4:	d008      	beq.n	8005ad8 <memmove+0x28>
 8005ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ace:	e7f8      	b.n	8005ac2 <memmove+0x12>
 8005ad0:	4402      	add	r2, r0
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d100      	bne.n	8005ada <memmove+0x2a>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ae2:	e7f7      	b.n	8005ad4 <memmove+0x24>

08005ae4 <_free_r>:
 8005ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d048      	beq.n	8005b7c <_free_r+0x98>
 8005aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aee:	9001      	str	r0, [sp, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f1a1 0404 	sub.w	r4, r1, #4
 8005af6:	bfb8      	it	lt
 8005af8:	18e4      	addlt	r4, r4, r3
 8005afa:	f000 f8d3 	bl	8005ca4 <__malloc_lock>
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <_free_r+0x9c>)
 8005b00:	9801      	ldr	r0, [sp, #4]
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	4615      	mov	r5, r2
 8005b06:	b933      	cbnz	r3, 8005b16 <_free_r+0x32>
 8005b08:	6063      	str	r3, [r4, #4]
 8005b0a:	6014      	str	r4, [r2, #0]
 8005b0c:	b003      	add	sp, #12
 8005b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b12:	f000 b8cd 	b.w	8005cb0 <__malloc_unlock>
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	d90b      	bls.n	8005b32 <_free_r+0x4e>
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	1862      	adds	r2, r4, r1
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bf04      	itt	eq
 8005b22:	681a      	ldreq	r2, [r3, #0]
 8005b24:	685b      	ldreq	r3, [r3, #4]
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	bf04      	itt	eq
 8005b2a:	1852      	addeq	r2, r2, r1
 8005b2c:	6022      	streq	r2, [r4, #0]
 8005b2e:	602c      	str	r4, [r5, #0]
 8005b30:	e7ec      	b.n	8005b0c <_free_r+0x28>
 8005b32:	461a      	mov	r2, r3
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b10b      	cbz	r3, 8005b3c <_free_r+0x58>
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d9fa      	bls.n	8005b32 <_free_r+0x4e>
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	1855      	adds	r5, r2, r1
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	d10b      	bne.n	8005b5c <_free_r+0x78>
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	4421      	add	r1, r4
 8005b48:	1854      	adds	r4, r2, r1
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	d1dd      	bne.n	8005b0c <_free_r+0x28>
 8005b50:	681c      	ldr	r4, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	4421      	add	r1, r4
 8005b58:	6011      	str	r1, [r2, #0]
 8005b5a:	e7d7      	b.n	8005b0c <_free_r+0x28>
 8005b5c:	d902      	bls.n	8005b64 <_free_r+0x80>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	e7d3      	b.n	8005b0c <_free_r+0x28>
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	1961      	adds	r1, r4, r5
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf04      	itt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	6063      	str	r3, [r4, #4]
 8005b72:	bf04      	itt	eq
 8005b74:	1949      	addeq	r1, r1, r5
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	6054      	str	r4, [r2, #4]
 8005b7a:	e7c7      	b.n	8005b0c <_free_r+0x28>
 8005b7c:	b003      	add	sp, #12
 8005b7e:	bd30      	pop	{r4, r5, pc}
 8005b80:	20014390 	.word	0x20014390

08005b84 <_malloc_r>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	1ccd      	adds	r5, r1, #3
 8005b88:	f025 0503 	bic.w	r5, r5, #3
 8005b8c:	3508      	adds	r5, #8
 8005b8e:	2d0c      	cmp	r5, #12
 8005b90:	bf38      	it	cc
 8005b92:	250c      	movcc	r5, #12
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	4606      	mov	r6, r0
 8005b98:	db01      	blt.n	8005b9e <_malloc_r+0x1a>
 8005b9a:	42a9      	cmp	r1, r5
 8005b9c:	d903      	bls.n	8005ba6 <_malloc_r+0x22>
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba6:	f000 f87d 	bl	8005ca4 <__malloc_lock>
 8005baa:	4921      	ldr	r1, [pc, #132]	; (8005c30 <_malloc_r+0xac>)
 8005bac:	680a      	ldr	r2, [r1, #0]
 8005bae:	4614      	mov	r4, r2
 8005bb0:	b99c      	cbnz	r4, 8005bda <_malloc_r+0x56>
 8005bb2:	4f20      	ldr	r7, [pc, #128]	; (8005c34 <_malloc_r+0xb0>)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	b923      	cbnz	r3, 8005bc2 <_malloc_r+0x3e>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f000 f862 	bl	8005c84 <_sbrk_r>
 8005bc0:	6038      	str	r0, [r7, #0]
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 f85d 	bl	8005c84 <_sbrk_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d123      	bne.n	8005c16 <_malloc_r+0x92>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f000 f86c 	bl	8005cb0 <__malloc_unlock>
 8005bd8:	e7e3      	b.n	8005ba2 <_malloc_r+0x1e>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	1b5b      	subs	r3, r3, r5
 8005bde:	d417      	bmi.n	8005c10 <_malloc_r+0x8c>
 8005be0:	2b0b      	cmp	r3, #11
 8005be2:	d903      	bls.n	8005bec <_malloc_r+0x68>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	441c      	add	r4, r3
 8005be8:	6025      	str	r5, [r4, #0]
 8005bea:	e004      	b.n	8005bf6 <_malloc_r+0x72>
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	42a2      	cmp	r2, r4
 8005bf0:	bf0c      	ite	eq
 8005bf2:	600b      	streq	r3, [r1, #0]
 8005bf4:	6053      	strne	r3, [r2, #4]
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f000 f85a 	bl	8005cb0 <__malloc_unlock>
 8005bfc:	f104 000b 	add.w	r0, r4, #11
 8005c00:	1d23      	adds	r3, r4, #4
 8005c02:	f020 0007 	bic.w	r0, r0, #7
 8005c06:	1ac2      	subs	r2, r0, r3
 8005c08:	d0cc      	beq.n	8005ba4 <_malloc_r+0x20>
 8005c0a:	1a1b      	subs	r3, r3, r0
 8005c0c:	50a3      	str	r3, [r4, r2]
 8005c0e:	e7c9      	b.n	8005ba4 <_malloc_r+0x20>
 8005c10:	4622      	mov	r2, r4
 8005c12:	6864      	ldr	r4, [r4, #4]
 8005c14:	e7cc      	b.n	8005bb0 <_malloc_r+0x2c>
 8005c16:	1cc4      	adds	r4, r0, #3
 8005c18:	f024 0403 	bic.w	r4, r4, #3
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d0e3      	beq.n	8005be8 <_malloc_r+0x64>
 8005c20:	1a21      	subs	r1, r4, r0
 8005c22:	4630      	mov	r0, r6
 8005c24:	f000 f82e 	bl	8005c84 <_sbrk_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1dd      	bne.n	8005be8 <_malloc_r+0x64>
 8005c2c:	e7cf      	b.n	8005bce <_malloc_r+0x4a>
 8005c2e:	bf00      	nop
 8005c30:	20014390 	.word	0x20014390
 8005c34:	20014394 	.word	0x20014394

08005c38 <_realloc_r>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	460e      	mov	r6, r1
 8005c40:	b921      	cbnz	r1, 8005c4c <_realloc_r+0x14>
 8005c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c46:	4611      	mov	r1, r2
 8005c48:	f7ff bf9c 	b.w	8005b84 <_malloc_r>
 8005c4c:	b922      	cbnz	r2, 8005c58 <_realloc_r+0x20>
 8005c4e:	f7ff ff49 	bl	8005ae4 <_free_r>
 8005c52:	4625      	mov	r5, r4
 8005c54:	4628      	mov	r0, r5
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	f000 f830 	bl	8005cbc <_malloc_usable_size_r>
 8005c5c:	42a0      	cmp	r0, r4
 8005c5e:	d20f      	bcs.n	8005c80 <_realloc_r+0x48>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4638      	mov	r0, r7
 8005c64:	f7ff ff8e 	bl	8005b84 <_malloc_r>
 8005c68:	4605      	mov	r5, r0
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d0f2      	beq.n	8005c54 <_realloc_r+0x1c>
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4622      	mov	r2, r4
 8005c72:	f7ff fbe3 	bl	800543c <memcpy>
 8005c76:	4631      	mov	r1, r6
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff ff33 	bl	8005ae4 <_free_r>
 8005c7e:	e7e9      	b.n	8005c54 <_realloc_r+0x1c>
 8005c80:	4635      	mov	r5, r6
 8005c82:	e7e7      	b.n	8005c54 <_realloc_r+0x1c>

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f000 f81e 	bl	8005cd0 <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	20014490 	.word	0x20014490

08005ca4 <__malloc_lock>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <__malloc_lock+0x8>)
 8005ca6:	f000 b811 	b.w	8005ccc <__retarget_lock_acquire_recursive>
 8005caa:	bf00      	nop
 8005cac:	20014498 	.word	0x20014498

08005cb0 <__malloc_unlock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__malloc_unlock+0x8>)
 8005cb2:	f000 b80c 	b.w	8005cce <__retarget_lock_release_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	20014498 	.word	0x20014498

08005cbc <_malloc_usable_size_r>:
 8005cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc0:	1f18      	subs	r0, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbc      	itt	lt
 8005cc6:	580b      	ldrlt	r3, [r1, r0]
 8005cc8:	18c0      	addlt	r0, r0, r3
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_acquire_recursive>:
 8005ccc:	4770      	bx	lr

08005cce <__retarget_lock_release_recursive>:
 8005cce:	4770      	bx	lr

08005cd0 <_sbrk>:
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <_sbrk+0x14>)
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	b909      	cbnz	r1, 8005cdc <_sbrk+0xc>
 8005cd8:	4903      	ldr	r1, [pc, #12]	; (8005ce8 <_sbrk+0x18>)
 8005cda:	6019      	str	r1, [r3, #0]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	4402      	add	r2, r0
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	4770      	bx	lr
 8005ce4:	20014398 	.word	0x20014398
 8005ce8:	200144a0 	.word	0x200144a0

08005cec <_init>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr

08005cf8 <_fini>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr
